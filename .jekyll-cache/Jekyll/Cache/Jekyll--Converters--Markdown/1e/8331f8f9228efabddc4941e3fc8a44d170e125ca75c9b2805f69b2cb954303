I"ï„<h2 id="project-team-id--ptid-cds-jul21-1171-members---diana-hema-pavithra-and-sophiya">Project Team ID = PTID-CDS-JUL21-1171 (Members - Diana, Hema, Pavithra and Sophiya)</h2>
<h2 id="project-id--prcl-0017-customer-churn-business-case">Project ID = PRCL-0017 Customer Churn Business case</h2>
<hr />

<h3 id="-preliminary--identify-the-business-case-">‚Äî‚Äî Preliminary ‚Üí Identify The Business Case ‚Äî‚Äî</h3>
<p><img src="/img/posts/no-churn/communication-services-media-entertainment.jpg" alt="jpg" />
<a href="https://shorturl.at/wyzVZ">Image Credit</a></p>
<blockquote>
  <ul>
    <li><strong>Project Description:</strong> No-Churn Telecom is an established Telecom operator in Europe with more than a decade in Business. Due to new players in the market, telecom industry has become very competitive and retaining customers becoming a challenge. <br />
In spite of No-Churn initiatives of reducing tariffs and promoting more offers, the churn rate (percentage of customers migrating to competitors) is well above 10%. <br />
No-Churn wants to explore the possibility of Machine Learning to help with following use cases to retain competitive edge in the industry. <br /></li>
    <li><strong>Industry Field:</strong> Telecommunication Service
      <h3 id="project-goal--help-no-churn-with-their-use-cases-with-ml">Project Goal ‚Üí Help No-Churn with their use cases with ML</h3>
      <ol class="task-list">
        <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Understanding the variables that are influencing the customers to migrate.</li>
        <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Creating Churn risk scores that can be indicative to drive retention campaigns.</li>
        <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Introduce new predicting variable ‚ÄúCHURN-FLAG‚Äù with values YES(1) or NO(0) so that email campaigns with lucrative offers can be targeted to Churn YES customers. <br /></li>
      </ol>
    </li>
  </ul>
</blockquote>

<p>Help to identify possible CHURN-FLAG YES customers and provide more attention in customer touch point areas, including customer care support, request fulfilment, auto categorizing tickets as high priority for quick resolutions any questions they may have etc.</p>

<p><img src="/img/posts/no-churn/- project roadmap.png" alt="png" /></p>

<p><img src="/img/posts/no-churn/Phase 1.png" alt="png" />
<strong>1. Import Libraries</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!pip install ipython-sql --user
</span><span class="o">%</span><span class="n">reload_ext</span> <span class="n">sql</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="c1">#pip install PyMySQL --user
</span><span class="kn">import</span> <span class="nn">pymysql</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">'ignore'</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">sklearn.feature_selection</span> <span class="kn">import</span> <span class="n">SelectKBest</span>
<span class="kn">from</span> <span class="nn">sklearn.feature_selection</span> <span class="kn">import</span> <span class="n">chi2</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">xgboost</span> <span class="kn">import</span> <span class="n">plot_importance</span>
<span class="kn">from</span> <span class="nn">xgboost</span> <span class="kn">import</span> <span class="n">XGBClassifier</span>
<span class="c1">#Importing libraries
</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="o">*</span> <span class="c1"># module math
</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>

<span class="kn">import</span> <span class="nn">itertools</span>
<span class="kn">import</span> <span class="nn">io</span>
<span class="kn">import</span> <span class="nn">plotly.figure_factory</span> <span class="k">as</span> <span class="n">ff</span> <span class="c1"># visualization
</span><span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">"ignore"</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">confusion_matrix</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">,</span> <span class="n">classification_report</span>


<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="kn">import</span> <span class="nn">plotly.graph_objects</span> <span class="k">as</span> <span class="n">go</span>
<span class="kn">import</span> <span class="nn">plotly.offline</span> <span class="k">as</span> <span class="n">py</span>
</code></pre></div></div>

<p><strong>2. Accessing The Database</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">db_host</span> <span class="o">=</span> <span class="s">'18.136.157.135'</span>
<span class="n">username</span> <span class="o">=</span> <span class="s">'dm_team3'</span>
<span class="n">user_pass</span> <span class="o">=</span> <span class="s">'DM!$!Team!27@9!20&amp;'</span>
<span class="n">db_name</span> <span class="o">=</span> <span class="s">'project_telecom'</span>

<span class="n">conn</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s">'mysql+pymysql://'</span><span class="o">+</span><span class="n">username</span><span class="o">+</span><span class="s">':'</span><span class="o">+</span><span class="n">user_pass</span><span class="o">+</span><span class="s">'@'</span><span class="o">+</span><span class="n">db_host</span><span class="o">+</span><span class="s">'/'</span><span class="o">+</span><span class="n">db_name</span><span class="p">)</span>
<span class="n">conn</span><span class="p">.</span><span class="n">table_names</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['telecom_churn_data']
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span> <span class="o">=</span> <span class="s">"select * from telecom_churn_data"</span> <span class="c1"># SQL statement * --&gt; selecting all columns and records
</span><span class="n">tcd</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_sql</span><span class="p">(</span><span class="n">query</span><span class="p">,</span><span class="n">conn</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">tcd</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="n">tcd</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(4617, 21)
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>columns1</th>
      <th>columns2</th>
      <th>columns3</th>
      <th>columns4</th>
      <th>columns5</th>
      <th>columns6</th>
      <th>columns7</th>
      <th>columns8</th>
      <th>columns9</th>
      <th>columns10</th>
      <th>...</th>
      <th>columns12</th>
      <th>columns13</th>
      <th>columns14</th>
      <th>columns15</th>
      <th>columns16</th>
      <th>columns17</th>
      <th>columns18</th>
      <th>columns19</th>
      <th>columns20</th>
      <th>columns21</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>KS</td>
      <td>128</td>
      <td>415</td>
      <td>382-4657</td>
      <td>no</td>
      <td>yes</td>
      <td>25</td>
      <td>265.1</td>
      <td>110</td>
      <td>45.07</td>
      <td>...</td>
      <td>99</td>
      <td>16.78</td>
      <td>244.7</td>
      <td>91</td>
      <td>11.01</td>
      <td>10</td>
      <td>3</td>
      <td>2.7</td>
      <td>1</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>1</th>
      <td>OH</td>
      <td>107</td>
      <td>415</td>
      <td>371-7191</td>
      <td>no</td>
      <td>yes</td>
      <td>26</td>
      <td>161.6</td>
      <td>123</td>
      <td>27.47</td>
      <td>...</td>
      <td>103</td>
      <td>16.62</td>
      <td>254.4</td>
      <td>103</td>
      <td>11.45</td>
      <td>13.7</td>
      <td>3</td>
      <td>3.7</td>
      <td>1</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NJ</td>
      <td>137</td>
      <td>415</td>
      <td>358-1921</td>
      <td>no</td>
      <td>no</td>
      <td>0</td>
      <td>243.4</td>
      <td>114</td>
      <td>41.38</td>
      <td>...</td>
      <td>110</td>
      <td>10.3</td>
      <td>162.6</td>
      <td>104</td>
      <td>7.32</td>
      <td>12.2</td>
      <td>5</td>
      <td>3.29</td>
      <td>0</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>3</th>
      <td>OH</td>
      <td>84</td>
      <td>408</td>
      <td>375-9999</td>
      <td>yes</td>
      <td>no</td>
      <td>0</td>
      <td>299.4</td>
      <td>71</td>
      <td>50.9</td>
      <td>...</td>
      <td>88</td>
      <td>5.26</td>
      <td>196.9</td>
      <td>89</td>
      <td>8.86</td>
      <td>6.6</td>
      <td>7</td>
      <td>1.78</td>
      <td>2</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>4</th>
      <td>OK</td>
      <td>75</td>
      <td>415</td>
      <td>330-6626</td>
      <td>yes</td>
      <td>no</td>
      <td>0</td>
      <td>166.7</td>
      <td>113</td>
      <td>28.34</td>
      <td>...</td>
      <td>122</td>
      <td>12.61</td>
      <td>186.9</td>
      <td>121</td>
      <td>8.41</td>
      <td>10.1</td>
      <td>3</td>
      <td>2.73</td>
      <td>3</td>
      <td>False.</td>
    </tr>
  </tbody>
</table>
<p>5 rows √ó 21 columns</p>
</div>

<p><strong>3. Display Data Overview</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#building function to cover data overview (data inspection)
</span><span class="k">def</span> <span class="nf">dataoveriew</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="s">:</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Rows:"</span><span class="p">,</span> <span class="n">df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Number of features:"</span><span class="p">,</span> <span class="n">df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Features:"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">tcd</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="n">tolist</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Missing values:"</span><span class="p">,</span> <span class="n">df</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">().</span><span class="n">values</span><span class="p">.</span><span class="nb">sum</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Unique values:"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">nunique</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Duplicated Rows:"</span><span class="p">,</span> <span class="n">df</span><span class="p">.</span><span class="n">duplicated</span><span class="p">().</span><span class="nb">sum</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">____________________________________________"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"            Info of The Dataset"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"____________________________________________"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">info</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dataoveriew</span><span class="p">(</span><span class="n">tcd</span><span class="p">,</span> <span class="s">'Overiew of the dataset'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Overiew of the dataset:

Rows: 4617

Number of features: 21

Features:
['columns1', 'columns2', 'columns3', 'columns4', 'columns5', 'columns6', 'columns7', 'columns8', 'columns9', 'columns10', 'columns11', 'columns12', 'columns13', 'columns14', 'columns15', 'columns16', 'columns17', 'columns18', 'columns19', 'columns20', 'columns21']

Missing values: 0

Unique values:
columns1       51
columns2      218
columns3        3
columns4     4617
columns5        2
columns6        2
columns7       47
columns8     1901
columns9      123
columns10    1901
columns11    1833
columns12     125
columns13    1621
columns14    1813
columns15     130
columns16    1012
columns17     168
columns18      21
columns19     168
columns20      10
columns21       2
dtype: int64

Duplicated Rows: 0

____________________________________________
            Info of The Dataset
____________________________________________
&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 4617 entries, 0 to 4616
Data columns (total 21 columns):
 #   Column     Non-Null Count  Dtype 
---  ------     --------------  ----- 
 0   columns1   4617 non-null   object
 1   columns2   4617 non-null   object
 2   columns3   4617 non-null   object
 3   columns4   4617 non-null   object
 4   columns5   4617 non-null   object
 5   columns6   4617 non-null   object
 6   columns7   4617 non-null   object
 7   columns8   4617 non-null   object
 8   columns9   4617 non-null   object
 9   columns10  4617 non-null   object
 10  columns11  4617 non-null   object
 11  columns12  4617 non-null   object
 12  columns13  4617 non-null   object
 13  columns14  4617 non-null   object
 14  columns15  4617 non-null   object
 15  columns16  4617 non-null   object
 16  columns17  4617 non-null   object
 17  columns18  4617 non-null   object
 18  columns19  4617 non-null   object
 19  columns20  4617 non-null   object
 20  columns21  4617 non-null   object
dtypes: object(21)
memory usage: 757.6+ KB
None
</code></pre></div></div>

<p>As we can see above result, our data is pretty nice. No missing values inside, no duplicated rows. <br />
<strong>Decision:</strong> move forward to rename the column</p>

<p><strong>4. Rename Columns and Rectify The Index</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#rename the columns as in pdf
</span><span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'columns1'</span><span class="p">:</span><span class="s">'State'</span><span class="p">,</span> <span class="s">'columns2'</span><span class="p">:</span><span class="s">'Account_Length'</span><span class="p">,</span> <span class="s">'columns3'</span><span class="p">:</span><span class="s">'Area_Code'</span><span class="p">,</span> <span class="s">'columns4'</span><span class="p">:</span><span class="s">'Phone'</span><span class="p">,</span> <span class="s">'columns5'</span><span class="p">:</span><span class="s">'International_Plan'</span><span class="p">,</span> <span class="s">'columns6'</span><span class="p">:</span><span class="s">'VMail_Plan'</span><span class="p">,</span> <span class="s">'columns7'</span><span class="p">:</span><span class="s">'VMail_Message'</span><span class="p">,</span>
        <span class="s">'columns8'</span><span class="p">:</span><span class="s">'Day_Mins'</span><span class="p">,</span> <span class="s">'columns9'</span><span class="p">:</span><span class="s">'Day_Calls'</span><span class="p">,</span> <span class="s">'columns10'</span><span class="p">:</span><span class="s">'Day_Charge'</span><span class="p">,</span> <span class="s">'columns11'</span><span class="p">:</span><span class="s">'Eve_Mins'</span><span class="p">,</span> <span class="s">'columns12'</span><span class="p">:</span><span class="s">'Eve_Calls'</span><span class="p">,</span> <span class="s">'columns13'</span><span class="p">:</span><span class="s">'Eve_Charge'</span><span class="p">,</span> <span class="s">'columns14'</span><span class="p">:</span><span class="s">'Night_Mins'</span><span class="p">,</span> 
        <span class="s">'columns15'</span><span class="p">:</span><span class="s">'Night_Calls'</span><span class="p">,</span> <span class="s">'columns16'</span><span class="p">:</span><span class="s">'Night_Charge'</span><span class="p">,</span> <span class="s">'columns17'</span><span class="p">:</span><span class="s">'International_Mins'</span><span class="p">,</span> <span class="s">'columns18'</span><span class="p">:</span><span class="s">'International_Calls'</span><span class="p">,</span> <span class="s">'columns19'</span><span class="p">:</span><span class="s">'International_Charge'</span><span class="p">,</span> <span class="s">'columns20'</span><span class="p">:</span><span class="s">'CustServ_Calls'</span><span class="p">,</span> <span class="s">'columns21'</span><span class="p">:</span><span class="s">'Churn'</span><span class="p">}</span>

<span class="n">tcd</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

<span class="n">tcd</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>State</th>
      <th>Account_Length</th>
      <th>Area_Code</th>
      <th>Phone</th>
      <th>International_Plan</th>
      <th>VMail_Plan</th>
      <th>VMail_Message</th>
      <th>Day_Mins</th>
      <th>Day_Calls</th>
      <th>Day_Charge</th>
      <th>...</th>
      <th>Eve_Calls</th>
      <th>Eve_Charge</th>
      <th>Night_Mins</th>
      <th>Night_Calls</th>
      <th>Night_Charge</th>
      <th>International_Mins</th>
      <th>International_Calls</th>
      <th>International_Charge</th>
      <th>CustServ_Calls</th>
      <th>Churn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>KS</td>
      <td>128</td>
      <td>415</td>
      <td>382-4657</td>
      <td>no</td>
      <td>yes</td>
      <td>25</td>
      <td>265.1</td>
      <td>110</td>
      <td>45.07</td>
      <td>...</td>
      <td>99</td>
      <td>16.78</td>
      <td>244.7</td>
      <td>91</td>
      <td>11.01</td>
      <td>10</td>
      <td>3</td>
      <td>2.7</td>
      <td>1</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>1</th>
      <td>OH</td>
      <td>107</td>
      <td>415</td>
      <td>371-7191</td>
      <td>no</td>
      <td>yes</td>
      <td>26</td>
      <td>161.6</td>
      <td>123</td>
      <td>27.47</td>
      <td>...</td>
      <td>103</td>
      <td>16.62</td>
      <td>254.4</td>
      <td>103</td>
      <td>11.45</td>
      <td>13.7</td>
      <td>3</td>
      <td>3.7</td>
      <td>1</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>2</th>
      <td>NJ</td>
      <td>137</td>
      <td>415</td>
      <td>358-1921</td>
      <td>no</td>
      <td>no</td>
      <td>0</td>
      <td>243.4</td>
      <td>114</td>
      <td>41.38</td>
      <td>...</td>
      <td>110</td>
      <td>10.3</td>
      <td>162.6</td>
      <td>104</td>
      <td>7.32</td>
      <td>12.2</td>
      <td>5</td>
      <td>3.29</td>
      <td>0</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>3</th>
      <td>OH</td>
      <td>84</td>
      <td>408</td>
      <td>375-9999</td>
      <td>yes</td>
      <td>no</td>
      <td>0</td>
      <td>299.4</td>
      <td>71</td>
      <td>50.9</td>
      <td>...</td>
      <td>88</td>
      <td>5.26</td>
      <td>196.9</td>
      <td>89</td>
      <td>8.86</td>
      <td>6.6</td>
      <td>7</td>
      <td>1.78</td>
      <td>2</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>4</th>
      <td>OK</td>
      <td>75</td>
      <td>415</td>
      <td>330-6626</td>
      <td>yes</td>
      <td>no</td>
      <td>0</td>
      <td>166.7</td>
      <td>113</td>
      <td>28.34</td>
      <td>...</td>
      <td>122</td>
      <td>12.61</td>
      <td>186.9</td>
      <td>121</td>
      <td>8.41</td>
      <td>10.1</td>
      <td>3</td>
      <td>2.73</td>
      <td>3</td>
      <td>False.</td>
    </tr>
  </tbody>
</table>
<p>5 rows √ó 21 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># rectify the index
</span><span class="n">index</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Index</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4618</span><span class="p">))</span>
<span class="n">tcd</span> <span class="o">=</span> <span class="n">tcd</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
<span class="n">tcd</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>State</th>
      <th>Account_Length</th>
      <th>Area_Code</th>
      <th>Phone</th>
      <th>International_Plan</th>
      <th>VMail_Plan</th>
      <th>VMail_Message</th>
      <th>Day_Mins</th>
      <th>Day_Calls</th>
      <th>Day_Charge</th>
      <th>...</th>
      <th>Eve_Calls</th>
      <th>Eve_Charge</th>
      <th>Night_Mins</th>
      <th>Night_Calls</th>
      <th>Night_Charge</th>
      <th>International_Mins</th>
      <th>International_Calls</th>
      <th>International_Charge</th>
      <th>CustServ_Calls</th>
      <th>Churn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>KS</td>
      <td>128</td>
      <td>415</td>
      <td>382-4657</td>
      <td>no</td>
      <td>yes</td>
      <td>25</td>
      <td>265.1</td>
      <td>110</td>
      <td>45.07</td>
      <td>...</td>
      <td>99</td>
      <td>16.78</td>
      <td>244.7</td>
      <td>91</td>
      <td>11.01</td>
      <td>10</td>
      <td>3</td>
      <td>2.7</td>
      <td>1</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>2</th>
      <td>OH</td>
      <td>107</td>
      <td>415</td>
      <td>371-7191</td>
      <td>no</td>
      <td>yes</td>
      <td>26</td>
      <td>161.6</td>
      <td>123</td>
      <td>27.47</td>
      <td>...</td>
      <td>103</td>
      <td>16.62</td>
      <td>254.4</td>
      <td>103</td>
      <td>11.45</td>
      <td>13.7</td>
      <td>3</td>
      <td>3.7</td>
      <td>1</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>3</th>
      <td>NJ</td>
      <td>137</td>
      <td>415</td>
      <td>358-1921</td>
      <td>no</td>
      <td>no</td>
      <td>0</td>
      <td>243.4</td>
      <td>114</td>
      <td>41.38</td>
      <td>...</td>
      <td>110</td>
      <td>10.3</td>
      <td>162.6</td>
      <td>104</td>
      <td>7.32</td>
      <td>12.2</td>
      <td>5</td>
      <td>3.29</td>
      <td>0</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>4</th>
      <td>OH</td>
      <td>84</td>
      <td>408</td>
      <td>375-9999</td>
      <td>yes</td>
      <td>no</td>
      <td>0</td>
      <td>299.4</td>
      <td>71</td>
      <td>50.9</td>
      <td>...</td>
      <td>88</td>
      <td>5.26</td>
      <td>196.9</td>
      <td>89</td>
      <td>8.86</td>
      <td>6.6</td>
      <td>7</td>
      <td>1.78</td>
      <td>2</td>
      <td>False.</td>
    </tr>
    <tr>
      <th>5</th>
      <td>OK</td>
      <td>75</td>
      <td>415</td>
      <td>330-6626</td>
      <td>yes</td>
      <td>no</td>
      <td>0</td>
      <td>166.7</td>
      <td>113</td>
      <td>28.34</td>
      <td>...</td>
      <td>122</td>
      <td>12.61</td>
      <td>186.9</td>
      <td>121</td>
      <td>8.41</td>
      <td>10.1</td>
      <td>3</td>
      <td>2.73</td>
      <td>3</td>
      <td>False.</td>
    </tr>
  </tbody>
</table>
<p>5 rows √ó 21 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tcd</span><span class="p">.</span><span class="n">describe</span><span class="p">().</span><span class="n">T</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>count</th>
      <th>unique</th>
      <th>top</th>
      <th>freq</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>State</th>
      <td>4617</td>
      <td>51</td>
      <td>WV</td>
      <td>149</td>
    </tr>
    <tr>
      <th>Account_Length</th>
      <td>4617</td>
      <td>218</td>
      <td>90</td>
      <td>63</td>
    </tr>
    <tr>
      <th>Area_Code</th>
      <td>4617</td>
      <td>3</td>
      <td>415</td>
      <td>2299</td>
    </tr>
    <tr>
      <th>Phone</th>
      <td>4617</td>
      <td>4617</td>
      <td>336-2113</td>
      <td>1</td>
    </tr>
    <tr>
      <th>International_Plan</th>
      <td>4617</td>
      <td>2</td>
      <td>no</td>
      <td>4171</td>
    </tr>
    <tr>
      <th>VMail_Plan</th>
      <td>4617</td>
      <td>2</td>
      <td>no</td>
      <td>3381</td>
    </tr>
    <tr>
      <th>VMail_Message</th>
      <td>4617</td>
      <td>47</td>
      <td>0</td>
      <td>3381</td>
    </tr>
    <tr>
      <th>Day_Mins</th>
      <td>4617</td>
      <td>1901</td>
      <td>154</td>
      <td>10</td>
    </tr>
    <tr>
      <th>Day_Calls</th>
      <td>4617</td>
      <td>123</td>
      <td>102</td>
      <td>108</td>
    </tr>
    <tr>
      <th>Day_Charge</th>
      <td>4617</td>
      <td>1901</td>
      <td>32.18</td>
      <td>10</td>
    </tr>
    <tr>
      <th>Eve_Mins</th>
      <td>4617</td>
      <td>1833</td>
      <td>169.9</td>
      <td>10</td>
    </tr>
    <tr>
      <th>Eve_Calls</th>
      <td>4617</td>
      <td>125</td>
      <td>105</td>
      <td>111</td>
    </tr>
    <tr>
      <th>Eve_Charge</th>
      <td>4617</td>
      <td>1621</td>
      <td>14.25</td>
      <td>15</td>
    </tr>
    <tr>
      <th>Night_Mins</th>
      <td>4617</td>
      <td>1813</td>
      <td>186.2</td>
      <td>10</td>
    </tr>
    <tr>
      <th>Night_Calls</th>
      <td>4617</td>
      <td>130</td>
      <td>105</td>
      <td>115</td>
    </tr>
    <tr>
      <th>Night_Charge</th>
      <td>4617</td>
      <td>1012</td>
      <td>9.66</td>
      <td>19</td>
    </tr>
    <tr>
      <th>International_Mins</th>
      <td>4617</td>
      <td>168</td>
      <td>11.1</td>
      <td>81</td>
    </tr>
    <tr>
      <th>International_Calls</th>
      <td>4617</td>
      <td>21</td>
      <td>3</td>
      <td>925</td>
    </tr>
    <tr>
      <th>International_Charge</th>
      <td>4617</td>
      <td>168</td>
      <td>3</td>
      <td>81</td>
    </tr>
    <tr>
      <th>CustServ_Calls</th>
      <td>4617</td>
      <td>10</td>
      <td>1</td>
      <td>1651</td>
    </tr>
    <tr>
      <th>Churn</th>
      <td>4617</td>
      <td>2</td>
      <td>False.</td>
      <td>3961</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tcd</span><span class="p">.</span><span class="n">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 4617 entries, 1 to 4617
Data columns (total 21 columns):
 #   Column                Non-Null Count  Dtype 
---  ------                --------------  ----- 
 0   State                 4617 non-null   object
 1   Account_Length        4617 non-null   object
 2   Area_Code             4617 non-null   object
 3   Phone                 4617 non-null   object
 4   International_Plan    4617 non-null   object
 5   VMail_Plan            4617 non-null   object
 6   VMail_Message         4617 non-null   object
 7   Day_Mins              4617 non-null   object
 8   Day_Calls             4617 non-null   object
 9   Day_Charge            4617 non-null   object
 10  Eve_Mins              4617 non-null   object
 11  Eve_Calls             4617 non-null   object
 12  Eve_Charge            4617 non-null   object
 13  Night_Mins            4617 non-null   object
 14  Night_Calls           4617 non-null   object
 15  Night_Charge          4617 non-null   object
 16  International_Mins    4617 non-null   object
 17  International_Calls   4617 non-null   object
 18  International_Charge  4617 non-null   object
 19  CustServ_Calls        4617 non-null   object
 20  Churn                 4617 non-null   object
dtypes: object(21)
memory usage: 757.6+ KB
</code></pre></div></div>

<p>As we can see above, the descriptive statistics result seems to be unproper served. Cause according to our <code class="language-plaintext highlighter-rouge">tcd.info()</code>, the entire variables data type are setted as ‚Äòobject‚Äô. <br /> <strong>Decision:</strong> modify the dtypes of each variables according to .pdf (Project details)
___</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tcd</span> <span class="o">=</span> <span class="n">tcd</span><span class="p">.</span><span class="n">astype</span><span class="p">({</span><span class="s">'Day_Mins'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">,</span> <span class="s">'Day_Charge'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">,</span> <span class="s">'Eve_Mins'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">,</span> <span class="s">'Eve_Charge'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">,</span>
                    <span class="s">'Night_Mins'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">,</span> <span class="s">'Night_Charge'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">,</span> <span class="s">'International_Mins'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">,</span> <span class="s">'International_Charge'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">})</span>
<span class="c1">#tcd.info()
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tcd</span> <span class="o">=</span> <span class="n">tcd</span><span class="p">.</span><span class="n">astype</span><span class="p">({</span><span class="s">'Account_Length'</span><span class="p">:</span> <span class="s">'int64'</span><span class="p">,</span> <span class="s">'Area_Code'</span><span class="p">:</span> <span class="s">'int64'</span><span class="p">,</span> <span class="s">'VMail_Message'</span><span class="p">:</span> <span class="s">'int64'</span><span class="p">,</span> <span class="s">'Day_Calls'</span><span class="p">:</span> <span class="s">'int64'</span><span class="p">,</span>
                    <span class="s">'Eve_Calls'</span><span class="p">:</span> <span class="s">'int64'</span><span class="p">,</span> <span class="s">'Night_Calls'</span><span class="p">:</span> <span class="s">'int64'</span><span class="p">,</span> <span class="s">'International_Calls'</span><span class="p">:</span> <span class="s">'int64'</span><span class="p">,</span> <span class="s">'CustServ_Calls'</span><span class="p">:</span><span class="s">'int64'</span><span class="p">})</span>
<span class="n">dataoveriew</span><span class="p">(</span><span class="n">tcd</span><span class="p">,</span> <span class="s">'Overiew of the dataset'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Overiew of the dataset:

Rows: 4617

Number of features: 21

Features:
['State', 'Account_Length', 'Area_Code', 'Phone', 'International_Plan', 'VMail_Plan', 'VMail_Message', 'Day_Mins', 'Day_Calls', 'Day_Charge', 'Eve_Mins', 'Eve_Calls', 'Eve_Charge', 'Night_Mins', 'Night_Calls', 'Night_Charge', 'International_Mins', 'International_Calls', 'International_Charge', 'CustServ_Calls', 'Churn']

Missing values: 0

Unique values:
State                     51
Account_Length           218
Area_Code                  3
Phone                   4617
International_Plan         2
VMail_Plan                 2
VMail_Message             47
Day_Mins                1901
Day_Calls                123
Day_Charge              1901
Eve_Mins                1833
Eve_Calls                125
Eve_Charge              1621
Night_Mins              1813
Night_Calls              130
Night_Charge            1012
International_Mins       168
International_Calls       21
International_Charge     168
CustServ_Calls            10
Churn                      2
dtype: int64

Duplicated Rows: 0

____________________________________________
            Info of The Dataset
____________________________________________
&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 4617 entries, 1 to 4617
Data columns (total 21 columns):
 #   Column                Non-Null Count  Dtype  
---  ------                --------------  -----  
 0   State                 4617 non-null   object 
 1   Account_Length        4617 non-null   int64  
 2   Area_Code             4617 non-null   int64  
 3   Phone                 4617 non-null   object 
 4   International_Plan    4617 non-null   object 
 5   VMail_Plan            4617 non-null   object 
 6   VMail_Message         4617 non-null   int64  
 7   Day_Mins              4617 non-null   float64
 8   Day_Calls             4617 non-null   int64  
 9   Day_Charge            4617 non-null   float64
 10  Eve_Mins              4617 non-null   float64
 11  Eve_Calls             4617 non-null   int64  
 12  Eve_Charge            4617 non-null   float64
 13  Night_Mins            4617 non-null   float64
 14  Night_Calls           4617 non-null   int64  
 15  Night_Charge          4617 non-null   float64
 16  International_Mins    4617 non-null   float64
 17  International_Calls   4617 non-null   int64  
 18  International_Charge  4617 non-null   float64
 19  CustServ_Calls        4617 non-null   int64  
 20  Churn                 4617 non-null   object 
dtypes: float64(8), int64(8), object(5)
memory usage: 757.6+ KB
None
</code></pre></div></div>

<p>Some of dtypes has been changed. Go forward to show descriptive statistics</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tcd</span><span class="p">.</span><span class="n">describe</span><span class="p">().</span><span class="n">T</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>count</th>
      <th>mean</th>
      <th>std</th>
      <th>min</th>
      <th>25%</th>
      <th>50%</th>
      <th>75%</th>
      <th>max</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Account_Length</th>
      <td>4617.0</td>
      <td>100.645224</td>
      <td>39.597194</td>
      <td>1.00</td>
      <td>74.00</td>
      <td>100.00</td>
      <td>127.00</td>
      <td>243.00</td>
    </tr>
    <tr>
      <th>Area_Code</th>
      <td>4617.0</td>
      <td>437.046350</td>
      <td>42.288212</td>
      <td>408.00</td>
      <td>408.00</td>
      <td>415.00</td>
      <td>510.00</td>
      <td>510.00</td>
    </tr>
    <tr>
      <th>VMail_Message</th>
      <td>4617.0</td>
      <td>7.849903</td>
      <td>13.592333</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>17.00</td>
      <td>51.00</td>
    </tr>
    <tr>
      <th>Day_Mins</th>
      <td>4617.0</td>
      <td>180.447152</td>
      <td>53.983540</td>
      <td>0.00</td>
      <td>143.70</td>
      <td>180.00</td>
      <td>216.80</td>
      <td>351.50</td>
    </tr>
    <tr>
      <th>Day_Calls</th>
      <td>4617.0</td>
      <td>100.054364</td>
      <td>19.883027</td>
      <td>0.00</td>
      <td>87.00</td>
      <td>100.00</td>
      <td>113.00</td>
      <td>165.00</td>
    </tr>
    <tr>
      <th>Day_Charge</th>
      <td>4617.0</td>
      <td>30.676576</td>
      <td>9.177145</td>
      <td>0.00</td>
      <td>24.43</td>
      <td>30.60</td>
      <td>36.86</td>
      <td>59.76</td>
    </tr>
    <tr>
      <th>Eve_Mins</th>
      <td>4617.0</td>
      <td>200.429088</td>
      <td>50.557001</td>
      <td>0.00</td>
      <td>165.90</td>
      <td>200.80</td>
      <td>234.00</td>
      <td>363.70</td>
    </tr>
    <tr>
      <th>Eve_Calls</th>
      <td>4617.0</td>
      <td>100.179770</td>
      <td>19.821314</td>
      <td>0.00</td>
      <td>87.00</td>
      <td>101.00</td>
      <td>114.00</td>
      <td>170.00</td>
    </tr>
    <tr>
      <th>Eve_Charge</th>
      <td>4617.0</td>
      <td>17.036703</td>
      <td>4.297332</td>
      <td>0.00</td>
      <td>14.10</td>
      <td>17.07</td>
      <td>19.89</td>
      <td>30.91</td>
    </tr>
    <tr>
      <th>Night_Mins</th>
      <td>4617.0</td>
      <td>200.623933</td>
      <td>50.543616</td>
      <td>23.20</td>
      <td>167.10</td>
      <td>200.80</td>
      <td>234.90</td>
      <td>395.00</td>
    </tr>
    <tr>
      <th>Night_Calls</th>
      <td>4617.0</td>
      <td>99.944120</td>
      <td>19.935053</td>
      <td>12.00</td>
      <td>87.00</td>
      <td>100.00</td>
      <td>113.00</td>
      <td>175.00</td>
    </tr>
    <tr>
      <th>Night_Charge</th>
      <td>4617.0</td>
      <td>9.028185</td>
      <td>2.274488</td>
      <td>1.04</td>
      <td>7.52</td>
      <td>9.04</td>
      <td>10.57</td>
      <td>17.77</td>
    </tr>
    <tr>
      <th>International_Mins</th>
      <td>4617.0</td>
      <td>10.279294</td>
      <td>2.757361</td>
      <td>0.00</td>
      <td>8.60</td>
      <td>10.30</td>
      <td>12.10</td>
      <td>20.00</td>
    </tr>
    <tr>
      <th>International_Calls</th>
      <td>4617.0</td>
      <td>4.433831</td>
      <td>2.457615</td>
      <td>0.00</td>
      <td>3.00</td>
      <td>4.00</td>
      <td>6.00</td>
      <td>20.00</td>
    </tr>
    <tr>
      <th>International_Charge</th>
      <td>4617.0</td>
      <td>2.775926</td>
      <td>0.744413</td>
      <td>0.00</td>
      <td>2.32</td>
      <td>2.78</td>
      <td>3.27</td>
      <td>5.40</td>
    </tr>
    <tr>
      <th>CustServ_Calls</th>
      <td>4617.0</td>
      <td>1.567035</td>
      <td>1.307019</td>
      <td>0.00</td>
      <td>1.00</td>
      <td>1.00</td>
      <td>2.00</td>
      <td>9.00</td>
    </tr>
  </tbody>
</table>
</div>

<p>So far is good, just need a little touch up to handling categorical values. <br /> <strong>Decision:</strong> go forward to encoding ‚Äòobject‚Äô dtypes to covering the entire columns. So the descriptive statistics above would involving the whole features.
___
<img src="/img/posts/no-churn/Phase 2.png" alt="png" />
<strong>1. Feature Encoding</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#build function to encoding multiple variables (object dtype)
</span><span class="k">class</span> <span class="nc">MultiColumnLabelEncoder</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">columns</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span> <span class="c1"># array of column names to encode
</span>
    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">X</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span> <span class="c1">#
</span>
    <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">X</span><span class="p">):</span>
        <span class="s">'''
        Transforms columns of X specified in self.columns using
        LabelEncoder(). If no columns specified, transforms all
        columns in X.
        '''</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">columns</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">columns</span><span class="p">:</span>
                <span class="n">output</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">LabelEncoder</span><span class="p">().</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="n">col</span><span class="p">])</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">colname</span><span class="p">,</span><span class="n">col</span> <span class="ow">in</span> <span class="n">output</span><span class="p">.</span><span class="n">iteritems</span><span class="p">():</span>
                <span class="n">output</span><span class="p">[</span><span class="n">colname</span><span class="p">]</span> <span class="o">=</span> <span class="n">LabelEncoder</span><span class="p">().</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">output</span>

    <span class="k">def</span> <span class="nf">fit_transform</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">X</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">y</span><span class="p">).</span><span class="n">transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MultiColumnLabelEncoder</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'State'</span><span class="p">,</span><span class="s">'Phone'</span><span class="p">,</span> <span class="s">'International_Plan'</span><span class="p">,</span> <span class="s">'VMail_Plan'</span><span class="p">,</span> <span class="s">'Churn'</span><span class="p">]).</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">tcd</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>State</th>
      <th>Account_Length</th>
      <th>Area_Code</th>
      <th>Phone</th>
      <th>International_Plan</th>
      <th>VMail_Plan</th>
      <th>VMail_Message</th>
      <th>Day_Mins</th>
      <th>Day_Calls</th>
      <th>Day_Charge</th>
      <th>...</th>
      <th>Eve_Calls</th>
      <th>Eve_Charge</th>
      <th>Night_Mins</th>
      <th>Night_Calls</th>
      <th>Night_Charge</th>
      <th>International_Mins</th>
      <th>International_Calls</th>
      <th>International_Charge</th>
      <th>CustServ_Calls</th>
      <th>Churn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>16</td>
      <td>128</td>
      <td>415</td>
      <td>2637</td>
      <td>0</td>
      <td>1</td>
      <td>25</td>
      <td>265.1</td>
      <td>110</td>
      <td>45.07</td>
      <td>...</td>
      <td>99</td>
      <td>16.78</td>
      <td>244.7</td>
      <td>91</td>
      <td>11.01</td>
      <td>10.0</td>
      <td>3</td>
      <td>2.70</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>35</td>
      <td>107</td>
      <td>415</td>
      <td>2132</td>
      <td>0</td>
      <td>1</td>
      <td>26</td>
      <td>161.6</td>
      <td>123</td>
      <td>27.47</td>
      <td>...</td>
      <td>103</td>
      <td>16.62</td>
      <td>254.4</td>
      <td>103</td>
      <td>11.45</td>
      <td>13.7</td>
      <td>3</td>
      <td>3.70</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>31</td>
      <td>137</td>
      <td>415</td>
      <td>1509</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>243.4</td>
      <td>114</td>
      <td>41.38</td>
      <td>...</td>
      <td>110</td>
      <td>10.30</td>
      <td>162.6</td>
      <td>104</td>
      <td>7.32</td>
      <td>12.2</td>
      <td>5</td>
      <td>3.29</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>35</td>
      <td>84</td>
      <td>408</td>
      <td>2326</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>299.4</td>
      <td>71</td>
      <td>50.90</td>
      <td>...</td>
      <td>88</td>
      <td>5.26</td>
      <td>196.9</td>
      <td>89</td>
      <td>8.86</td>
      <td>6.6</td>
      <td>7</td>
      <td>1.78</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>36</td>
      <td>75</td>
      <td>415</td>
      <td>150</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>166.7</td>
      <td>113</td>
      <td>28.34</td>
      <td>...</td>
      <td>122</td>
      <td>12.61</td>
      <td>186.9</td>
      <td>121</td>
      <td>8.41</td>
      <td>10.1</td>
      <td>3</td>
      <td>2.73</td>
      <td>3</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>4613</th>
      <td>34</td>
      <td>57</td>
      <td>510</td>
      <td>890</td>
      <td>0</td>
      <td>1</td>
      <td>25</td>
      <td>144.0</td>
      <td>81</td>
      <td>24.48</td>
      <td>...</td>
      <td>112</td>
      <td>15.91</td>
      <td>158.6</td>
      <td>122</td>
      <td>7.14</td>
      <td>8.5</td>
      <td>6</td>
      <td>2.30</td>
      <td>3</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4614</th>
      <td>32</td>
      <td>177</td>
      <td>408</td>
      <td>795</td>
      <td>0</td>
      <td>1</td>
      <td>29</td>
      <td>189.0</td>
      <td>91</td>
      <td>32.13</td>
      <td>...</td>
      <td>96</td>
      <td>25.76</td>
      <td>163.6</td>
      <td>116</td>
      <td>7.36</td>
      <td>15.7</td>
      <td>1</td>
      <td>4.24</td>
      <td>3</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4615</th>
      <td>46</td>
      <td>67</td>
      <td>408</td>
      <td>533</td>
      <td>0</td>
      <td>1</td>
      <td>33</td>
      <td>127.5</td>
      <td>126</td>
      <td>21.68</td>
      <td>...</td>
      <td>129</td>
      <td>25.17</td>
      <td>200.9</td>
      <td>91</td>
      <td>9.04</td>
      <td>13.0</td>
      <td>3</td>
      <td>3.51</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4616</th>
      <td>22</td>
      <td>98</td>
      <td>415</td>
      <td>1406</td>
      <td>0</td>
      <td>1</td>
      <td>23</td>
      <td>168.9</td>
      <td>98</td>
      <td>28.71</td>
      <td>...</td>
      <td>117</td>
      <td>19.24</td>
      <td>165.5</td>
      <td>96</td>
      <td>7.45</td>
      <td>14.3</td>
      <td>3</td>
      <td>3.86</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4617</th>
      <td>15</td>
      <td>140</td>
      <td>415</td>
      <td>4013</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>204.7</td>
      <td>100</td>
      <td>34.80</td>
      <td>...</td>
      <td>107</td>
      <td>10.78</td>
      <td>202.8</td>
      <td>115</td>
      <td>9.13</td>
      <td>12.1</td>
      <td>4</td>
      <td>3.27</td>
      <td>2</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>4617 rows √ó 21 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tcd</span> <span class="o">=</span> <span class="n">MultiColumnLabelEncoder</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'State'</span><span class="p">,</span><span class="s">'Phone'</span><span class="p">,</span> <span class="s">'International_Plan'</span><span class="p">,</span> <span class="s">'VMail_Plan'</span><span class="p">,</span> <span class="s">'Churn'</span><span class="p">]).</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">tcd</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tcd</span><span class="p">.</span><span class="n">describe</span><span class="p">().</span><span class="n">T</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>count</th>
      <th>mean</th>
      <th>std</th>
      <th>min</th>
      <th>25%</th>
      <th>50%</th>
      <th>75%</th>
      <th>max</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>State</th>
      <td>4617.0</td>
      <td>26.041585</td>
      <td>14.790361</td>
      <td>0.00</td>
      <td>13.00</td>
      <td>26.00</td>
      <td>39.00</td>
      <td>50.00</td>
    </tr>
    <tr>
      <th>Account_Length</th>
      <td>4617.0</td>
      <td>100.645224</td>
      <td>39.597194</td>
      <td>1.00</td>
      <td>74.00</td>
      <td>100.00</td>
      <td>127.00</td>
      <td>243.00</td>
    </tr>
    <tr>
      <th>Area_Code</th>
      <td>4617.0</td>
      <td>437.046350</td>
      <td>42.288212</td>
      <td>408.00</td>
      <td>408.00</td>
      <td>415.00</td>
      <td>510.00</td>
      <td>510.00</td>
    </tr>
    <tr>
      <th>Phone</th>
      <td>4617.0</td>
      <td>2308.000000</td>
      <td>1332.957426</td>
      <td>0.00</td>
      <td>1154.00</td>
      <td>2308.00</td>
      <td>3462.00</td>
      <td>4616.00</td>
    </tr>
    <tr>
      <th>International_Plan</th>
      <td>4617.0</td>
      <td>0.096600</td>
      <td>0.295444</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.00</td>
    </tr>
    <tr>
      <th>VMail_Plan</th>
      <td>4617.0</td>
      <td>0.267706</td>
      <td>0.442812</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.00</td>
      <td>1.00</td>
    </tr>
    <tr>
      <th>VMail_Message</th>
      <td>4617.0</td>
      <td>7.849903</td>
      <td>13.592333</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>17.00</td>
      <td>51.00</td>
    </tr>
    <tr>
      <th>Day_Mins</th>
      <td>4617.0</td>
      <td>180.447152</td>
      <td>53.983540</td>
      <td>0.00</td>
      <td>143.70</td>
      <td>180.00</td>
      <td>216.80</td>
      <td>351.50</td>
    </tr>
    <tr>
      <th>Day_Calls</th>
      <td>4617.0</td>
      <td>100.054364</td>
      <td>19.883027</td>
      <td>0.00</td>
      <td>87.00</td>
      <td>100.00</td>
      <td>113.00</td>
      <td>165.00</td>
    </tr>
    <tr>
      <th>Day_Charge</th>
      <td>4617.0</td>
      <td>30.676576</td>
      <td>9.177145</td>
      <td>0.00</td>
      <td>24.43</td>
      <td>30.60</td>
      <td>36.86</td>
      <td>59.76</td>
    </tr>
    <tr>
      <th>Eve_Mins</th>
      <td>4617.0</td>
      <td>200.429088</td>
      <td>50.557001</td>
      <td>0.00</td>
      <td>165.90</td>
      <td>200.80</td>
      <td>234.00</td>
      <td>363.70</td>
    </tr>
    <tr>
      <th>Eve_Calls</th>
      <td>4617.0</td>
      <td>100.179770</td>
      <td>19.821314</td>
      <td>0.00</td>
      <td>87.00</td>
      <td>101.00</td>
      <td>114.00</td>
      <td>170.00</td>
    </tr>
    <tr>
      <th>Eve_Charge</th>
      <td>4617.0</td>
      <td>17.036703</td>
      <td>4.297332</td>
      <td>0.00</td>
      <td>14.10</td>
      <td>17.07</td>
      <td>19.89</td>
      <td>30.91</td>
    </tr>
    <tr>
      <th>Night_Mins</th>
      <td>4617.0</td>
      <td>200.623933</td>
      <td>50.543616</td>
      <td>23.20</td>
      <td>167.10</td>
      <td>200.80</td>
      <td>234.90</td>
      <td>395.00</td>
    </tr>
    <tr>
      <th>Night_Calls</th>
      <td>4617.0</td>
      <td>99.944120</td>
      <td>19.935053</td>
      <td>12.00</td>
      <td>87.00</td>
      <td>100.00</td>
      <td>113.00</td>
      <td>175.00</td>
    </tr>
    <tr>
      <th>Night_Charge</th>
      <td>4617.0</td>
      <td>9.028185</td>
      <td>2.274488</td>
      <td>1.04</td>
      <td>7.52</td>
      <td>9.04</td>
      <td>10.57</td>
      <td>17.77</td>
    </tr>
    <tr>
      <th>International_Mins</th>
      <td>4617.0</td>
      <td>10.279294</td>
      <td>2.757361</td>
      <td>0.00</td>
      <td>8.60</td>
      <td>10.30</td>
      <td>12.10</td>
      <td>20.00</td>
    </tr>
    <tr>
      <th>International_Calls</th>
      <td>4617.0</td>
      <td>4.433831</td>
      <td>2.457615</td>
      <td>0.00</td>
      <td>3.00</td>
      <td>4.00</td>
      <td>6.00</td>
      <td>20.00</td>
    </tr>
    <tr>
      <th>International_Charge</th>
      <td>4617.0</td>
      <td>2.775926</td>
      <td>0.744413</td>
      <td>0.00</td>
      <td>2.32</td>
      <td>2.78</td>
      <td>3.27</td>
      <td>5.40</td>
    </tr>
    <tr>
      <th>CustServ_Calls</th>
      <td>4617.0</td>
      <td>1.567035</td>
      <td>1.307019</td>
      <td>0.00</td>
      <td>1.00</td>
      <td>1.00</td>
      <td>2.00</td>
      <td>9.00</td>
    </tr>
    <tr>
      <th>Churn</th>
      <td>4617.0</td>
      <td>0.142084</td>
      <td>0.349174</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1.00</td>
    </tr>
  </tbody>
</table>
</div>

<p>Fabulous.. they‚Äôre involving the entire columns (variables) inside our dataframe, no mess in between. <br /> <strong>Decision:</strong> go forward into the next step. <br /><br />
<strong>2. Splitting The Data (X and Y)</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># splitting the data into X and Y so we can do feature selection / feature importance
</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">tcd</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'Churn'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">tcd</span><span class="p">[</span><span class="s">'Churn'</span><span class="p">]</span>
<span class="n">display</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>
<span class="n">display</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>State</th>
      <th>Account_Length</th>
      <th>Area_Code</th>
      <th>Phone</th>
      <th>International_Plan</th>
      <th>VMail_Plan</th>
      <th>VMail_Message</th>
      <th>Day_Mins</th>
      <th>Day_Calls</th>
      <th>Day_Charge</th>
      <th>Eve_Mins</th>
      <th>Eve_Calls</th>
      <th>Eve_Charge</th>
      <th>Night_Mins</th>
      <th>Night_Calls</th>
      <th>Night_Charge</th>
      <th>International_Mins</th>
      <th>International_Calls</th>
      <th>International_Charge</th>
      <th>CustServ_Calls</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>16</td>
      <td>128</td>
      <td>415</td>
      <td>2637</td>
      <td>0</td>
      <td>1</td>
      <td>25</td>
      <td>265.1</td>
      <td>110</td>
      <td>45.07</td>
      <td>197.4</td>
      <td>99</td>
      <td>16.78</td>
      <td>244.7</td>
      <td>91</td>
      <td>11.01</td>
      <td>10.0</td>
      <td>3</td>
      <td>2.70</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>35</td>
      <td>107</td>
      <td>415</td>
      <td>2132</td>
      <td>0</td>
      <td>1</td>
      <td>26</td>
      <td>161.6</td>
      <td>123</td>
      <td>27.47</td>
      <td>195.5</td>
      <td>103</td>
      <td>16.62</td>
      <td>254.4</td>
      <td>103</td>
      <td>11.45</td>
      <td>13.7</td>
      <td>3</td>
      <td>3.70</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>31</td>
      <td>137</td>
      <td>415</td>
      <td>1509</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>243.4</td>
      <td>114</td>
      <td>41.38</td>
      <td>121.2</td>
      <td>110</td>
      <td>10.30</td>
      <td>162.6</td>
      <td>104</td>
      <td>7.32</td>
      <td>12.2</td>
      <td>5</td>
      <td>3.29</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>35</td>
      <td>84</td>
      <td>408</td>
      <td>2326</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>299.4</td>
      <td>71</td>
      <td>50.90</td>
      <td>61.9</td>
      <td>88</td>
      <td>5.26</td>
      <td>196.9</td>
      <td>89</td>
      <td>8.86</td>
      <td>6.6</td>
      <td>7</td>
      <td>1.78</td>
      <td>2</td>
    </tr>
    <tr>
      <th>5</th>
      <td>36</td>
      <td>75</td>
      <td>415</td>
      <td>150</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>166.7</td>
      <td>113</td>
      <td>28.34</td>
      <td>148.3</td>
      <td>122</td>
      <td>12.61</td>
      <td>186.9</td>
      <td>121</td>
      <td>8.41</td>
      <td>10.1</td>
      <td>3</td>
      <td>2.73</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1    0
2    0
3    0
4    0
5    0
Name: Churn, dtype: int32
</code></pre></div></div>

<p>To narrow the scope, we agreed to limit 10 features at the modeling stage. 10 features are selected based on feature selection techniques and top 10 rankings. This is done to prevent <code class="language-plaintext highlighter-rouge">"the curse of dimensionality"</code> which will lead to <em>overfitting</em>.</p>

<p><strong>3. Feature Selection Technique</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># FEATURE SELECTION TECHNIQUE
#apply SelectKBest class to extract top 10 best features
</span><span class="n">bestfeatures</span> <span class="o">=</span> <span class="n">SelectKBest</span><span class="p">(</span><span class="n">score_func</span><span class="o">=</span><span class="n">chi2</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">fit</span> <span class="o">=</span> <span class="n">bestfeatures</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="n">dfscores</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">fit</span><span class="p">.</span><span class="n">scores_</span><span class="p">)</span>
<span class="n">dfcolumns</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>

<span class="c1">#concat two dataframes for better visualization
</span><span class="n">featurescores</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">dfcolumns</span><span class="p">,</span><span class="n">dfscores</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">featurescores</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Specs'</span><span class="p">,</span> <span class="s">'Score'</span><span class="p">]</span> <span class="c1">#naming the data
</span><span class="k">print</span><span class="p">(</span><span class="n">featurescores</span><span class="p">.</span><span class="n">nlargest</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s">'Score'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                 Specs        Score
7             Day_Mins  3055.100135
6        VMail_Message  1019.757912
9           Day_Charge   519.329000
10            Eve_Mins   445.993054
4   International_Plan   276.614354
3                Phone   276.402610
19      CustServ_Calls   220.546005
13          Night_Mins   110.011675
5           VMail_Plan    41.021084
12          Eve_Charge    37.902981
</code></pre></div></div>

<p>According to the result above, it is proven that 10 selected features could be able to influence the <code class="language-plaintext highlighter-rouge">"churn rate"</code>, it designates that customers-decision whether they decide to keep stay (subscribe) or migrate. <strong>[Project Goal Number 1 Solved]</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#applied selected feature above to our X variables (features)
</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">x</span><span class="p">[[</span><span class="s">'Day_Mins'</span><span class="p">,</span> <span class="s">'VMail_Message'</span><span class="p">,</span> <span class="s">'Day_Charge'</span><span class="p">,</span><span class="s">'Eve_Mins'</span><span class="p">,</span><span class="s">'International_Plan'</span><span class="p">,</span><span class="s">'Phone'</span><span class="p">,</span><span class="s">'CustServ_Calls'</span><span class="p">,</span><span class="s">'Night_Mins'</span><span class="p">,</span><span class="s">'VMail_Plan'</span><span class="p">,</span><span class="s">'Eve_Charge'</span><span class="p">]].</span><span class="n">copy</span><span class="p">()</span>
<span class="n">X</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Day_Mins</th>
      <th>VMail_Message</th>
      <th>Day_Charge</th>
      <th>Eve_Mins</th>
      <th>International_Plan</th>
      <th>Phone</th>
      <th>CustServ_Calls</th>
      <th>Night_Mins</th>
      <th>VMail_Plan</th>
      <th>Eve_Charge</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>265.1</td>
      <td>25</td>
      <td>45.07</td>
      <td>197.4</td>
      <td>0</td>
      <td>2637</td>
      <td>1</td>
      <td>244.7</td>
      <td>1</td>
      <td>16.78</td>
    </tr>
    <tr>
      <th>2</th>
      <td>161.6</td>
      <td>26</td>
      <td>27.47</td>
      <td>195.5</td>
      <td>0</td>
      <td>2132</td>
      <td>1</td>
      <td>254.4</td>
      <td>1</td>
      <td>16.62</td>
    </tr>
    <tr>
      <th>3</th>
      <td>243.4</td>
      <td>0</td>
      <td>41.38</td>
      <td>121.2</td>
      <td>0</td>
      <td>1509</td>
      <td>0</td>
      <td>162.6</td>
      <td>0</td>
      <td>10.30</td>
    </tr>
    <tr>
      <th>4</th>
      <td>299.4</td>
      <td>0</td>
      <td>50.90</td>
      <td>61.9</td>
      <td>1</td>
      <td>2326</td>
      <td>2</td>
      <td>196.9</td>
      <td>0</td>
      <td>5.26</td>
    </tr>
    <tr>
      <th>5</th>
      <td>166.7</td>
      <td>0</td>
      <td>28.34</td>
      <td>148.3</td>
      <td>1</td>
      <td>150</td>
      <td>3</td>
      <td>186.9</td>
      <td>0</td>
      <td>12.61</td>
    </tr>
  </tbody>
</table>
</div>

<p>Final result will be use to perpetuate to further phase.</p>

<hr />
<p><img src="/img/posts/no-churn/Phase 3.png" alt="png" /></p>
<blockquote>
  <p>This phase purpose is to get the insight and understand of our data. Whether it needs further treatment or not, it will be checked on this phase to prevent any mistakes in a further steps.</p>
</blockquote>

<p><strong>1. Skewness and Kurtosis</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">display</span><span class="p">(</span><span class="s">'--- Skewness of 10 Selected Features ---'</span><span class="p">,</span><span class="n">X</span><span class="p">.</span><span class="n">skew</span><span class="p">())</span>
<span class="n">display</span><span class="p">(</span><span class="s">'--- Kurtosis of 10 Selected Festures ---'</span><span class="p">,</span><span class="n">X</span><span class="p">.</span><span class="n">kurtosis</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'--- Skewness of 10 Selected Features ---'



Day_Mins             -0.002948
VMail_Message         1.326734
Day_Charge           -0.002952
Eve_Mins             -0.005280
International_Plan    2.731995
Phone                 0.000000
CustServ_Calls        1.046800
Night_Mins            0.020515
VMail_Plan            1.049631
Eve_Charge           -0.005252
dtype: float64



'--- Kurtosis of 10 Selected Festures ---'



Day_Mins             -0.042399
VMail_Message         0.123526
Day_Charge           -0.042264
Eve_Mins              0.043630
International_Plan    5.466164
Phone                -1.200000
CustServ_Calls        1.515026
Night_Mins            0.061409
VMail_Plan           -0.898664
Eve_Charge            0.043522
dtype: float64
</code></pre></div></div>

<p><strong>2. Boxplot Visualization</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Boxplot analysis
</span>
<span class="n">figure</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>


<span class="n">plt</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">'Boxplot of 10 Selected Features'</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Day_Mins'</span><span class="p">],</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'VMail_Message'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Day_Charge'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Eve_Mins'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'International_Plan'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Phone'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'CustServ_Calls'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Night_Mins'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'VMail_Plan'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Eve_Charge'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="c1">#plt.savefig('[Fig 3.1] Boxplot of 10 Selected Features.png', dpi = 300)
</span><span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_38_0.png" alt="png" /></p>

<p>From visualization above, we found a lot of outliers almost in every 10 selected features <code class="language-plaintext highlighter-rouge">(except for 'Phone' and 'Vmail_Plan')</code>. <br /> <strong>Decision:</strong> move forward into the details, which will show the exact values that fall into the outlier category. <br /><br />
<strong>3. Visualize The Detail Outliers and Outlier Treatment</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">outliers_detection_result</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="c1"># Counting Q1 &amp; Q3 values
</span>    <span class="n">Q1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">quantile</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="p">.</span><span class="mi">25</span><span class="p">)</span>
    <span class="n">Q3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">quantile</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="p">.</span><span class="mi">75</span><span class="p">)</span>
    <span class="n">IQR</span> <span class="o">=</span> <span class="n">Q3</span> <span class="o">-</span> <span class="n">Q1</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Quartile 1 = '</span><span class="p">,</span> <span class="n">Q1</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Quartile 3 = '</span><span class="p">,</span> <span class="n">Q3</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'IQR = '</span><span class="p">,</span> <span class="n">IQR</span><span class="p">)</span>
    <span class="n">min_IQR</span> <span class="o">=</span> <span class="n">Q1</span> <span class="o">-</span> <span class="mf">1.5</span> <span class="o">*</span> <span class="n">IQR</span>
    <span class="n">max_IQR</span> <span class="o">=</span> <span class="n">Q3</span> <span class="o">+</span> <span class="mf">1.5</span> <span class="o">*</span> <span class="n">IQR</span>
    
    <span class="k">print</span><span class="p">(</span><span class="s">'Minimum IQR = '</span><span class="p">,</span> <span class="n">min_IQR</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Maximum IQR = '</span><span class="p">,</span> <span class="n">max_IQR</span><span class="p">)</span>

    <span class="n">min_values</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">min</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">max_values</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'Minimum value = '</span><span class="p">,</span> <span class="n">min_values</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Maximum value = '</span><span class="p">,</span> <span class="n">max_values</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">min_values</span> <span class="o">&lt;</span> <span class="n">min_IQR</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Found low outlier!'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Not found low outlier!'</span><span class="p">)</span>  

    <span class="k">if</span> <span class="p">(</span><span class="n">max_values</span> <span class="o">&gt;</span> <span class="n">max_IQR</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Found high outlier!'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Not found high outlier!'</span><span class="p">)</span>

    <span class="n">low_out</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">high_out</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">min_IQR</span><span class="p">):</span>
            <span class="n">low_out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">max_IQR</span><span class="p">):</span>
            <span class="n">high_out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'Low outlier : '</span><span class="p">,</span> <span class="n">low_out</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'High outlier : '</span><span class="p">,</span> <span class="n">high_out</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'------------------ 1. Day_Mins Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">Day_Mins</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 2. VMail_Message Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">VMail_Message</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 3. Day_Charge Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">Day_Charge</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 4. Eve_Mins Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">Eve_Mins</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 5. International_Plan Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">International_Plan</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 6. Phone Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">Phone</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 7. CustServ_Calls Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">CustServ_Calls</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 8. Night_Mins Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">Night_Mins</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 9. VMail_Plan Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">VMail_Plan</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">------------------ 10. Eve_Charge Outliers Detection: ------------------'</span><span class="p">)</span>
<span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">Eve_Charge</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------------------ 1. Day_Mins Outliers Detection: ------------------
Quartile 1 =  143.7
Quartile 3 =  216.8
IQR =  73.10000000000002
Minimum IQR =  34.049999999999955
Maximum IQR =  326.45000000000005
Minimum value =  0.0
Maximum value =  351.5
Found low outlier!
Found high outlier!
Low outlier :  [30.9, 34.0, 12.5, 25.9, 0.0, 0.0, 19.5, 7.9, 27.0, 17.6, 2.6, 7.8, 18.9, 29.9]
High outlier :  [332.9, 337.4, 326.5, 350.8, 335.5, 334.3, 346.8, 329.8, 328.1, 345.3, 338.4, 351.5, 332.1]

------------------ 2. VMail_Message Outliers Detection: ------------------
Quartile 1 =  0.0
Quartile 3 =  17.0
IQR =  17.0
Minimum IQR =  -25.5
Maximum IQR =  42.5
Minimum value =  0
Maximum value =  51
Not found low outlier!
Found high outlier!
Low outlier :  []
High outlier :  [46, 43, 48, 48, 45, 46, 43, 45, 51, 43, 45, 46, 43, 47, 44, 44, 49, 44, 43, 47, 43, 45, 45, 45, 43, 46, 44, 50, 44, 50, 47, 44, 43, 44, 43, 43, 46, 45, 49, 46, 49, 45, 43, 47, 46, 45, 43, 46, 45, 48, 43]

------------------ 3. Day_Charge Outliers Detection: ------------------
Quartile 1 =  24.43
Quartile 3 =  36.86
IQR =  12.43
Minimum IQR =  5.785
Maximum IQR =  55.504999999999995
Minimum value =  0.0
Maximum value =  59.76
Found low outlier!
Found high outlier!
Low outlier :  [5.25, 5.78, 2.13, 4.4, 0.0, 0.0, 3.32, 1.34, 4.59, 2.99, 0.44, 1.33, 3.21, 5.08]
High outlier :  [56.59, 57.36, 55.51, 59.64, 57.04, 56.83, 58.96, 56.07, 55.78, 58.7, 57.53, 59.76, 56.46]

------------------ 4. Eve_Mins Outliers Detection: ------------------
Quartile 1 =  165.9
Quartile 3 =  234.0
IQR =  68.1
Minimum IQR =  63.750000000000014
Maximum IQR =  336.15
Minimum value =  0.0
Maximum value =  363.7
Found low outlier!
Found high outlier!
Low outlier :  [61.9, 31.2, 42.2, 58.9, 43.9, 52.9, 42.5, 60.8, 58.6, 56.0, 48.1, 60.0, 49.2, 0.0, 22.3, 58.3, 37.8, 41.7, 47.3, 53.2]
High outlier :  [348.5, 351.6, 350.5, 337.1, 347.3, 350.9, 339.9, 361.8, 354.2, 363.7, 341.3, 344.0, 349.4, 348.9, 344.9, 352.1]

------------------ 5. International_Plan Outliers Detection: ------------------
Quartile 1 =  0.0
Quartile 3 =  0.0
IQR =  0.0
Minimum IQR =  0.0
Maximum IQR =  0.0
Minimum value =  0
Maximum value =  1
Not found low outlier!
Found high outlier!
Low outlier :  []
High outlier :  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

------------------ 6. Phone Outliers Detection: ------------------
Quartile 1 =  1154.0
Quartile 3 =  3462.0
IQR =  2308.0
Minimum IQR =  -2308.0
Maximum IQR =  6924.0
Minimum value =  0
Maximum value =  4616
Not found low outlier!
Not found high outlier!
Low outlier :  []
High outlier :  []

------------------ 7. CustServ_Calls Outliers Detection: ------------------
Quartile 1 =  1.0
Quartile 3 =  2.0
IQR =  1.0
Minimum IQR =  -0.5
Maximum IQR =  3.5
Minimum value =  0
Maximum value =  9
Not found low outlier!
Found high outlier!
Low outlier :  []
High outlier :  [4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 7, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 7, 4, 9, 5, 4, 4, 5, 4, 4, 5, 5, 4, 6, 4, 6, 5, 5, 5, 6, 5, 4, 4, 5, 4, 4, 7, 4, 6, 5, 4, 4, 4, 6, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 5, 6, 5, 4, 4, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 6, 4, 5, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 8, 4, 4, 5, 4, 4, 4, 6, 5, 5, 7, 4, 4, 5, 4, 4, 5, 4, 4, 5, 7, 4, 4, 5, 7, 4, 4, 4, 4, 8, 6, 4, 4, 5, 5, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 4, 5, 4, 4, 5, 5, 4, 6, 4, 4, 4, 9, 6, 4, 5, 5, 4, 6, 4, 4, 5, 4, 4, 4, 5, 5, 6, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 5, 4, 5, 6, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 7, 6, 5, 6, 7, 5, 5, 4, 6, 4, 4, 4, 4, 5, 6, 7, 4, 4, 4, 5, 5, 5, 4, 4, 4, 5, 6, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 5, 4, 4, 5, 4, 5, 4, 4, 4, 5, 5, 4, 4, 6, 6, 4, 5, 5, 4, 4, 5, 4, 5, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 5, 4, 4, 4, 5, 5, 4, 4, 5, 5, 5, 4, 4, 7, 4, 4, 5, 5, 5, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 5, 4, 4, 4, 5, 4, 4, 6, 4, 4, 5, 4, 4]

------------------ 8. Night_Mins Outliers Detection: ------------------
Quartile 1 =  167.1
Quartile 3 =  234.9
IQR =  67.80000000000001
Minimum IQR =  65.39999999999998
Maximum IQR =  336.6
Minimum value =  23.2
Maximum value =  395.0
Found low outlier!
Found high outlier!
Low outlier :  [57.5, 45.0, 63.3, 54.5, 50.1, 43.7, 23.2, 63.6, 56.6, 54.0, 64.2, 50.1, 53.3, 61.4, 47.4, 50.9, 46.7, 65.2, 59.5]
High outlier :  [354.9, 349.2, 345.8, 342.8, 364.3, 349.7, 352.5, 381.9, 377.5, 367.7, 344.3, 395.0, 350.2, 352.2, 364.9, 381.6, 359.9]

------------------ 9. VMail_Plan Outliers Detection: ------------------
Quartile 1 =  0.0
Quartile 3 =  1.0
IQR =  1.0
Minimum IQR =  -1.5
Maximum IQR =  2.5
Minimum value =  0
Maximum value =  1
Not found low outlier!
Not found high outlier!
Low outlier :  []
High outlier :  []

------------------ 10. Eve_Charge Outliers Detection: ------------------
Quartile 1 =  14.1
Quartile 3 =  19.89
IQR =  5.790000000000001
Minimum IQR =  5.414999999999997
Maximum IQR =  28.575000000000003
Minimum value =  0.0
Maximum value =  30.91
Found low outlier!
Found high outlier!
Low outlier :  [5.26, 2.65, 3.59, 5.01, 3.73, 4.5, 3.61, 5.17, 4.98, 4.76, 4.09, 5.1, 4.18, 0.0, 1.9, 4.96, 3.21, 3.54, 4.02, 4.52]
High outlier :  [29.62, 29.89, 29.79, 28.65, 29.52, 29.83, 28.89, 30.75, 30.11, 30.91, 29.01, 29.24, 29.7, 29.66, 29.32, 29.93]
</code></pre></div></div>

<p>That‚Äôs the details of outliers on each features. <br /> <strong>Decision:</strong> treat outliers by <u>replacing them with 95th and 5th percentile.<u></u></u></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#build functions (outliers treatment) by replacing them with the 95th and 5th percentile.
</span><span class="k">def</span> <span class="nf">outliers_treatment</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">field_name</span><span class="p">):</span>
    <span class="n">p_05</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">field_name</span><span class="p">].</span><span class="n">quantile</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span> <span class="c1"># 5th quantile
</span>    <span class="n">p_95</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">field_name</span><span class="p">].</span><span class="n">quantile</span><span class="p">(</span><span class="mf">0.95</span><span class="p">)</span> <span class="c1"># 95th quantile
</span>    <span class="n">df</span><span class="p">[</span><span class="n">field_name</span><span class="p">].</span><span class="n">clip</span><span class="p">(</span><span class="n">p_05</span><span class="p">,</span> <span class="n">p_95</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Status: Completed</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'------------------- Report -------------------'</span><span class="p">)</span>
    <span class="n">outliers_detection_result</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">field_name</span><span class="p">])</span>
    <span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">field_name</span><span class="p">])</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Result'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">display</span><span class="p">(</span><span class="n">outliers_treatment</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="s">'Day_Mins'</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">outliers_treatment</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="s">'VMail_Message'</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">outliers_treatment</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="s">'Day_Charge'</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">outliers_treatment</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="s">'Eve_Mins'</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">outliers_treatment</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="s">'International_Plan'</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">outliers_treatment</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="s">'CustServ_Calls'</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">outliers_treatment</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="s">'Night_Mins'</span><span class="p">))</span>
<span class="n">display</span><span class="p">(</span><span class="n">outliers_treatment</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="s">'Eve_Charge'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Status: Completed

------------------- Report -------------------
Quartile 1 =  143.7
Quartile 3 =  216.8
IQR =  73.10000000000002
Minimum IQR =  34.049999999999955
Maximum IQR =  326.45000000000005
Minimum value =  91.66000000000001
Maximum value =  271.1
Not found low outlier!
Not found high outlier!
Low outlier :  []
High outlier :  []
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_44_1.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None


Status: Completed

------------------- Report -------------------
Quartile 1 =  0.0
Quartile 3 =  17.0
IQR =  17.0
Minimum IQR =  -25.5
Maximum IQR =  42.5
Minimum value =  0
Maximum value =  37
Not found low outlier!
Not found high outlier!
Low outlier :  []
High outlier :  []
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_44_4.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None


Status: Completed

------------------- Report -------------------
Quartile 1 =  24.43
Quartile 3 =  36.86
IQR =  12.43
Minimum IQR =  5.785
Maximum IQR =  55.504999999999995
Minimum value =  15.584
Maximum value =  46.09
Not found low outlier!
Not found high outlier!
Low outlier :  []
High outlier :  []
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_44_7.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None


Status: Completed

------------------- Report -------------------
Quartile 1 =  165.9
Quartile 3 =  234.0
IQR =  68.1
Minimum IQR =  63.750000000000014
Maximum IQR =  336.15
Minimum value =  118.78
Maximum value =  284.12
Not found low outlier!
Not found high outlier!
Low outlier :  []
High outlier :  []
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_44_10.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None


Status: Completed

------------------- Report -------------------
Quartile 1 =  0.0
Quartile 3 =  0.0
IQR =  0.0
Minimum IQR =  0.0
Maximum IQR =  0.0
Minimum value =  0
Maximum value =  1
Not found low outlier!
Found high outlier!
Low outlier :  []
High outlier :  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_44_13.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None


Status: Completed

------------------- Report -------------------
Quartile 1 =  1.0
Quartile 3 =  2.0
IQR =  1.0
Minimum IQR =  -0.5
Maximum IQR =  3.5
Minimum value =  0
Maximum value =  4
Not found low outlier!
Found high outlier!
Low outlier :  []
High outlier :  [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_44_16.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None


Status: Completed

------------------- Report -------------------
Quartile 1 =  167.1
Quartile 3 =  234.9
IQR =  67.80000000000001
Minimum IQR =  65.39999999999998
Maximum IQR =  336.6
Minimum value =  117.28
Maximum value =  283.52
Not found low outlier!
Not found high outlier!
Low outlier :  []
High outlier :  []
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_44_19.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None


Status: Completed

------------------- Report -------------------
Quartile 1 =  14.1
Quartile 3 =  19.89
IQR =  5.790000000000001
Minimum IQR =  5.414999999999997
Maximum IQR =  28.575000000000003
Minimum value =  10.097999999999999
Maximum value =  24.151999999999997
Not found low outlier!
Not found high outlier!
Low outlier :  []
High outlier :  []
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_44_22.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>None
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Boxplot analysis (visualization after treating outliers)
</span>
<span class="n">figure</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>


<span class="n">plt</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">'Boxplot Visualization (After Outliers Treatment)'</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Day_Mins'</span><span class="p">],</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'VMail_Message'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Day_Charge'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Eve_Mins'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'International_Plan'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Phone'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'CustServ_Calls'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Night_Mins'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'VMail_Plan'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Eve_Charge'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="c1">#plt.savefig('[Fig 3.1] Boxplot of 10 Selected Features.png', dpi = 300)
</span><span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_45_0.png" alt="png" /></p>

<p>We limit the scope (even we know the outliers are still existed in two features). But, if we compare to our previous result, the latest version is much better even we can said it‚Äôs far away from perfectness. And it can be assumed that the final result can be used for further analysis (as modeling material in the next phase). <br /><br />
<strong>4. Visualize The Distributions</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">figure</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>

<span class="c1">#See the distribution of the data
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">'Distribution of 10 Selected Features'</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Day_Mins'</span><span class="p">],</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'VMail_Message'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Day_Charge'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Eve_Mins'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'International_Plan'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Phone'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'CustServ_Calls'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Night_Mins'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'VMail_Plan'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="s">'Eve_Charge'</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="c1">#plt.savefig('[Fig 3.2] Distribution of 10 Selected Features.png', dpi = 300)
</span><span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_47_0.png" alt="png" /></p>

<p>The distribution looks fine, go for further analysis. <br /><br />
<strong>5. Perform Heatmap Visualization</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tri</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">tri</span><span class="p">[</span><span class="s">'Churn'</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>
<span class="n">tri</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Day_Mins</th>
      <th>VMail_Message</th>
      <th>Day_Charge</th>
      <th>Eve_Mins</th>
      <th>International_Plan</th>
      <th>Phone</th>
      <th>CustServ_Calls</th>
      <th>Night_Mins</th>
      <th>VMail_Plan</th>
      <th>Eve_Charge</th>
      <th>Churn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>265.1</td>
      <td>25</td>
      <td>45.07</td>
      <td>197.40</td>
      <td>0</td>
      <td>2637</td>
      <td>1</td>
      <td>244.7</td>
      <td>1</td>
      <td>16.780</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>161.6</td>
      <td>26</td>
      <td>27.47</td>
      <td>195.50</td>
      <td>0</td>
      <td>2132</td>
      <td>1</td>
      <td>254.4</td>
      <td>1</td>
      <td>16.620</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>243.4</td>
      <td>0</td>
      <td>41.38</td>
      <td>121.20</td>
      <td>0</td>
      <td>1509</td>
      <td>0</td>
      <td>162.6</td>
      <td>0</td>
      <td>10.300</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>271.1</td>
      <td>0</td>
      <td>46.09</td>
      <td>118.78</td>
      <td>1</td>
      <td>2326</td>
      <td>2</td>
      <td>196.9</td>
      <td>0</td>
      <td>10.098</td>
      <td>0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>166.7</td>
      <td>0</td>
      <td>28.34</td>
      <td>148.30</td>
      <td>1</td>
      <td>150</td>
      <td>3</td>
      <td>186.9</td>
      <td>0</td>
      <td>12.610</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Heatmap to shows the correlation
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">15</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">tri</span><span class="p">.</span><span class="n">corr</span><span class="p">(),</span><span class="n">cmap</span><span class="o">=</span><span class="s">'nipy_spectral'</span><span class="p">,</span><span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Heatmap of 10 Selected Features + Target'</span><span class="p">,</span>
         <span class="n">fontsize</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
<span class="c1">#plt.savefig('[Fig 3.3] Heatmap of 10 Selected Features and Target.png', dpi = 300)
</span><span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/posts/no-churn/output_50_0.png" alt="png" /></p>

<p>According to heatmap result, the most correlated features (indicated by the highest value) are: <strong><code class="language-plaintext highlighter-rouge">Eve_Mins &gt;&lt; Eve_Charge, VMail_Message &gt;&lt; VMail_Plan, Day_Charge &gt;&lt; Day_Mins</code></strong>. We will involve them for further demystification, and consider it as an alternative if our modeling is not working well..</p>

<hr />
<p><img src="/img/posts/no-churn/Phase 4.png" alt="png" />
We vigorously believe when it comes to ML algorithm, <em><code class="language-plaintext highlighter-rouge">"One Size Doesn't Fit All"</code></em>. The same things additionally occur when it comes to prediction. To resolve the issue, several classification models will be utilized for the comparative analysis and the best model (shown by accuracy score) will be chosen for this project. These are the list of our models for classification problem:</p>
<ol>
  <li>Logistic Regression</li>
  <li>Decision Tree</li>
  <li>KNN</li>
  <li>Random Forest</li>
  <li>Gaussian NB</li>
  <li>SVC</li>
  <li>Gaussian Process Classifier</li>
  <li>AdaBoost</li>
  <li>Multi Layer Perceptron (MLP)</li>
  <li>Bagging Classifier</li>
  <li>XGBoost Modeling</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span><span class="p">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0    3961
1     656
Name: Churn, dtype: int64
</code></pre></div></div>

<p>As we can see above, the result 0 is majority (85%) and the rest of it is represent by 1 (15%). If we continue the modeling phase using this data, it will indicates misclassification. <br /> <strong>Decision:</strong> treat imbalanced data using SMOTE.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># As the data is imbalanced we are using SMOTE to make sure that the value counts for the binary classes is the same
</span>
<span class="c1"># imbalanced datasets will give imparied prediction results as the model is trained with higher emphasis on one class versus the other
</span>
<span class="kn">from</span> <span class="nn">imblearn.over_sampling</span> <span class="kn">import</span> <span class="n">SMOTE</span>   <span class="c1">#importing smote
</span><span class="n">oversampling</span> <span class="o">=</span>  <span class="n">SMOTE</span><span class="p">()</span> <span class="c1">#initializing SMOTE
</span><span class="n">x_smote</span><span class="p">,</span> <span class="n">y_smote</span>  <span class="o">=</span> <span class="n">oversampling</span><span class="p">.</span><span class="n">fit_resample</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">astype</span><span class="p">(</span><span class="s">'float'</span><span class="p">),</span> <span class="n">y</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">x_smote</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_smote</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(7922, 10) (7922,)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># checking to see if the data set is balanced
</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">y_smote</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">value_counts</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Churn
0        3961
1        3961
dtype: int64
</code></pre></div></div>

<p>Now our data is balanced. <br /> <strong>Decision:</strong> move forward to scaling the features.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##feature scaling &gt; Reason being, the feature scaling was implemented to prevent any skewness in the contour plot of
#the cost function which affects the gradient descent but the analytical solution using normal equation does not suffer from the
#same drawback.
</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="n">sc</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>

<span class="n">x_scaled</span> <span class="o">=</span>  <span class="n">sc</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">x_smote</span><span class="p">)</span>
<span class="n">X_sc</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">x_scaled</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># checking X 
</span>
<span class="n">X_sc</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>
<span class="n">X_sc</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Day_Mins</th>
      <th>VMail_Message</th>
      <th>Day_Charge</th>
      <th>Eve_Mins</th>
      <th>International_Plan</th>
      <th>Phone</th>
      <th>CustServ_Calls</th>
      <th>Night_Mins</th>
      <th>VMail_Plan</th>
      <th>Eve_Charge</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.395420</td>
      <td>1.599364</td>
      <td>1.395620</td>
      <td>-0.160002</td>
      <td>-0.497413</td>
      <td>0.240178</td>
      <td>-0.603658</td>
      <td>0.974279</td>
      <td>2.000813</td>
      <td>-0.159833</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-0.532285</td>
      <td>1.684772</td>
      <td>-0.532578</td>
      <td>-0.202718</td>
      <td>-0.497413</td>
      <td>-0.141030</td>
      <td>-0.603658</td>
      <td>1.195312</td>
      <td>2.000813</td>
      <td>-0.202152</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.991254</td>
      <td>-0.535830</td>
      <td>0.991356</td>
      <td>-1.873142</td>
      <td>-0.497413</td>
      <td>-0.611312</td>
      <td>-1.401237</td>
      <td>-0.896520</td>
      <td>-0.550401</td>
      <td>-1.873761</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.507171</td>
      <td>-0.535830</td>
      <td>1.507368</td>
      <td>-1.927549</td>
      <td>2.448922</td>
      <td>0.005414</td>
      <td>0.193921</td>
      <td>-0.114932</td>
      <td>-0.550401</td>
      <td>-1.927189</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-0.437296</td>
      <td>-0.535830</td>
      <td>-0.437264</td>
      <td>-1.263876</td>
      <td>2.448922</td>
      <td>-1.637176</td>
      <td>0.991499</td>
      <td>-0.342800</td>
      <td>-0.550401</td>
      <td>-1.262777</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">churn_predict</span><span class="p">(</span><span class="n">algorithm</span><span class="p">,</span> <span class="n">training_x</span><span class="p">,</span> <span class="n">testing_x</span><span class="p">,</span> <span class="n">training_y</span><span class="p">,</span> <span class="n">testing_y</span><span class="p">,</span> <span class="n">cf</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="p">):</span>
    <span class="c1">#modeling
</span>    <span class="n">algorithm</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">training_x</span><span class="p">,</span> <span class="n">training_y</span><span class="p">)</span>
    <span class="n">predictions</span> <span class="o">=</span> <span class="n">algorithm</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">testing_x</span><span class="p">)</span>
    <span class="n">probabilities</span> <span class="o">=</span> <span class="n">algorithm</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">testing_x</span><span class="p">)</span>
        
    <span class="k">print</span><span class="p">(</span><span class="s">'Algorithm:'</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">algorithm</span><span class="p">).</span><span class="n">__name__</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Classification report:</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">classification_report</span><span class="p">(</span><span class="n">testing_y</span><span class="p">,</span> <span class="n">predictions</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Accuracy Score:"</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">testing_y</span><span class="p">,</span> <span class="n">predictions</span><span class="p">))</span>
    
    <span class="c1">#confusion matrix
</span>    <span class="n">conf_matrix</span> <span class="o">=</span> <span class="n">confusion_matrix</span><span class="p">(</span><span class="n">testing_y</span><span class="p">,</span> <span class="n">predictions</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X_sc</span><span class="p">,</span> <span class="n">y_smote</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.33</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">stratify</span><span class="o">=</span><span class="n">y_smote</span><span class="p">)</span> <span class="c1">#stratify -&gt; it can reduce the variability of sample statistics
</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">y_test</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>((5307, 10), (2615, 10), (5307,), (2615,))
</code></pre></div></div>

<p><strong>1. Logistic Regression</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>

<span class="c1">#Baseline model        
</span><span class="n">logit</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">()</span>

<span class="n">logit_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">logit</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">"coefficients"</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">logit_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: LogisticRegression

Classification report:
               precision    recall  f1-score   support

           0       0.79      0.77      0.78      1308
           1       0.77      0.80      0.78      1307

    accuracy                           0.78      2615
   macro avg       0.78      0.78      0.78      2615
weighted avg       0.78      0.78      0.78      2615

Accuracy Score: 0.7808795411089866
</code></pre></div></div>

<p>Looks nice, but not good enough. So let‚Äôs doing a little improvement by comparing threshold, expecting better accuracies than above.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">predict_threshold</span> <span class="p">(</span><span class="n">model</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span><span class="n">thresholds</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">logit</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">X_test</span><span class="p">)[:,</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="n">thresholds</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">thr</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.1</span><span class="p">,</span><span class="mf">0.1</span><span class="p">):</span>
    <span class="n">y_predict</span> <span class="o">=</span> <span class="n">predict_threshold</span><span class="p">(</span><span class="n">logit</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span><span class="n">thr</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Threshold :"</span><span class="p">,</span><span class="n">thr</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span><span class="n">y_predict</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"accuracy score for threshold"</span> <span class="p">,</span> <span class="n">thr</span> <span class="p">,</span> <span class="s">"is"</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_predict</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Threshold : 0.0
[[   0 1308]
 [   0 1307]]
accuracy score for threshold 0.0 is 0.49980879541108986
Threshold : 0.1
[[ 199 1109]
 [   6 1301]]
accuracy score for threshold 0.1 is 0.5736137667304015
Threshold : 0.2
[[ 452  856]
 [  48 1259]]
accuracy score for threshold 0.2 is 0.654302103250478
Threshold : 0.30000000000000004
[[ 698  610]
 [  87 1220]]
accuracy score for threshold 0.30000000000000004 is 0.7334608030592734
Threshold : 0.4
[[ 867  441]
 [ 150 1157]]
accuracy score for threshold 0.4 is 0.7739961759082218
Threshold : 0.5
[[1002  306]
 [ 267 1040]]
accuracy score for threshold 0.5 is 0.7808795411089866
Threshold : 0.6000000000000001
[[1094  214]
 [ 455  852]]
accuracy score for threshold 0.6000000000000001 is 0.7441682600382409
Threshold : 0.7000000000000001
[[1159  149]
 [ 705  602]]
accuracy score for threshold 0.7000000000000001 is 0.6734225621414914
Threshold : 0.8
[[1217   91]
 [ 927  380]]
accuracy score for threshold 0.8 is 0.6107074569789674
Threshold : 0.9
[[1271   37]
 [1121  186]]
accuracy score for threshold 0.9 is 0.55717017208413
Threshold : 1.0
[[1308    0]
 [1307    0]]
accuracy score for threshold 1.0 is 0.5001912045889101
</code></pre></div></div>

<p>It is evident from the above that the optimal threshold is 0.5 which is the default threshold. <br /> Accuracy score is low as expected as the data is quite complex with no clear distinct boundaries for the two classes. Logistic regression models cannot be used for such complex data sets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Hyperparameter Tuning
</span><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">tree</span>
</code></pre></div></div>

<p><strong>2. Decision Tree</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model building - hyperparam tuning
</span>

<span class="n">Deci_Tree_model</span>  <span class="o">=</span> <span class="n">DecisionTreeClassifier</span><span class="p">()</span>

<span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span><span class="s">'max_depth'</span><span class="p">:[</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span>
              <span class="s">'random_state'</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">123</span><span class="p">,</span><span class="mi">154</span><span class="p">],</span>
              <span class="s">'splitter'</span><span class="p">:[</span><span class="s">'best'</span><span class="p">,</span> <span class="s">'random'</span><span class="p">],</span>
              <span class="s">'criterion'</span><span class="p">:[</span><span class="s">'gini'</span><span class="p">,</span> <span class="s">'entropy'</span><span class="p">]</span>
             <span class="p">}</span>  

<span class="n">grid</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">Deci_Tree_model</span><span class="p">,</span><span class="n">parameters</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
<span class="n">grid</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Best parameter of Decision Tree Algorithm:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">grid</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 100 candidates, totalling 500 fits
Best parameter of Decision Tree Algorithm:
 {'criterion': 'entropy', 'max_depth': 9, 'random_state': 100, 'splitter': 'best'}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Deci_Tree_model</span> <span class="o">=</span> <span class="n">DecisionTreeClassifier</span><span class="p">(</span><span class="n">criterion</span> <span class="o">=</span> <span class="s">'entropy'</span><span class="p">,</span> <span class="n">max_depth</span> <span class="o">=</span> <span class="mi">9</span><span class="p">,</span> 
                                         <span class="n">random_state</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">splitter</span> <span class="o">=</span> <span class="s">'best'</span><span class="p">)</span>
<span class="n">Deci_Tree_model_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">Deci_Tree_model</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">"features"</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">Deci_Tree_model_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: DecisionTreeClassifier

Classification report:
               precision    recall  f1-score   support

           0       0.94      0.93      0.94      1308
           1       0.93      0.94      0.94      1307

    accuracy                           0.94      2615
   macro avg       0.94      0.94      0.94      2615
weighted avg       0.94      0.94      0.94      2615

Accuracy Score: 0.9365200764818356
</code></pre></div></div>

<p><strong>3. KNN</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model building - hyperparam tuning
</span>
<span class="kn">from</span> <span class="nn">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KNeighborsClassifier</span>
<span class="n">knn</span>  <span class="o">=</span> <span class="n">KNeighborsClassifier</span><span class="p">()</span>

<span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span><span class="s">'n_neighbors'</span><span class="p">:[</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">75</span><span class="p">],</span>
              <span class="s">'weights'</span><span class="p">:</span> <span class="p">[</span><span class="s">'uniform'</span><span class="p">,</span><span class="s">'distance'</span><span class="p">],</span>
              <span class="s">'algorithm'</span><span class="p">:[</span><span class="s">'auto'</span><span class="p">,</span> <span class="s">'ball_tree'</span><span class="p">,</span> <span class="s">'kd_tree'</span><span class="p">,</span> <span class="s">'brute'</span><span class="p">],</span>
              <span class="s">'leaf_size'</span><span class="p">:[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">],</span>
             <span class="p">}</span>  

<span class="n">grid</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">knn</span><span class="p">,</span><span class="n">parameters</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
<span class="n">grid</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Best parameter of KNeighborsClassifier Algorithm:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">grid</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 200 candidates, totalling 1000 fits
Best parameter of KNeighborsClassifier Algorithm:
{'algorithm': 'auto', 'leaf_size': 5, 'n_neighbors': 5, 'weights': 'distance'}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">knn</span> <span class="o">=</span> <span class="n">KNeighborsClassifier</span><span class="p">(</span><span class="n">algorithm</span><span class="o">=</span><span class="s">'auto'</span><span class="p">,</span> <span class="n">leaf_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> 
                           <span class="n">n_neighbors</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">p</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">weights</span><span class="o">=</span><span class="s">'distance'</span><span class="p">)</span>
<span class="n">knn_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">knn</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">'None'</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">knn_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: KNeighborsClassifier

Classification report:
               precision    recall  f1-score   support

           0       0.95      0.85      0.90      1308
           1       0.87      0.95      0.91      1307

    accuracy                           0.90      2615
   macro avg       0.91      0.90      0.90      2615
weighted avg       0.91      0.90      0.90      2615

Accuracy Score: 0.9032504780114723
</code></pre></div></div>

<p><strong>4. Random Forest</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model building - hyperparam tuning
</span>
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="n">rfc</span>  <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">()</span>

<span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span><span class="s">'n_estimators'</span><span class="p">:[</span><span class="mi">10</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">100</span><span class="p">],</span>
              <span class="s">'random_state'</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">123</span><span class="p">],</span>
              <span class="s">'max_depth'</span><span class="p">:[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
              <span class="s">'criterion'</span><span class="p">:[</span><span class="s">'gini'</span><span class="p">,</span> <span class="s">'entropy'</span><span class="p">],</span>
             <span class="p">}</span>  

<span class="n">grid</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">rfc</span><span class="p">,</span><span class="n">parameters</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
<span class="n">grid</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Best parameter of RandomForestClassifier Algorithm:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">grid</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 128 candidates, totalling 640 fits
Best parameter of RandomForestClassifier Algorithm:
 {'criterion': 'entropy', 'max_depth': 10, 'n_estimators': 50, 'random_state': 20}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rfc</span> <span class="o">=</span> <span class="n">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span> <span class="n">random_state</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span>
                             <span class="n">max_depth</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">criterion</span> <span class="o">=</span> <span class="s">"entropy"</span><span class="p">)</span>

<span class="n">rfc_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">rfc</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">'features'</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">rfc_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: RandomForestClassifier

Classification report:
               precision    recall  f1-score   support

           0       0.92      0.93      0.92      1308
           1       0.93      0.91      0.92      1307

    accuracy                           0.92      2615
   macro avg       0.92      0.92      0.92      2615
weighted avg       0.92      0.92      0.92      2615

Accuracy Score: 0.9223709369024856
</code></pre></div></div>

<p><strong>5. Gaussian NB</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.naive_bayes</span> <span class="kn">import</span> <span class="n">GaussianNB</span>

<span class="n">gnb</span> <span class="o">=</span> <span class="n">GaussianNB</span><span class="p">(</span><span class="n">priors</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>

<span class="n">gnb_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">gnb</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">'None'</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">gnb_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: GaussianNB

Classification report:
               precision    recall  f1-score   support

           0       0.79      0.71      0.75      1308
           1       0.74      0.81      0.77      1307

    accuracy                           0.76      2615
   macro avg       0.76      0.76      0.76      2615
weighted avg       0.76      0.76      0.76      2615

Accuracy Score: 0.7621414913957935
</code></pre></div></div>

<p><strong>6. SVC</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model building - hyperparam tuning
</span>
<span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVC</span>
<span class="n">svc</span>  <span class="o">=</span> <span class="n">SVC</span><span class="p">()</span>

<span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span><span class="s">'C'</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">7.8</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
              <span class="s">'kernel'</span><span class="p">:</span> <span class="p">[</span><span class="s">'rbf'</span><span class="p">,</span> <span class="s">'sigmoid'</span><span class="p">],</span>
              <span class="s">'gamma'</span><span class="p">:[</span><span class="s">'scale'</span><span class="p">,</span> <span class="s">'auto'</span><span class="p">],</span>
              <span class="s">'random_state'</span><span class="p">:[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">124</span><span class="p">],</span>
             <span class="p">}</span>  

<span class="n">grid</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">svc</span><span class="p">,</span><span class="n">parameters</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
<span class="n">grid</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Best parameter of SVC Algorithm:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">grid</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 64 candidates, totalling 320 fits
Best parameter of SVC Algorithm:
 {'C': 10, 'gamma': 'auto', 'kernel': 'rbf', 'random_state': 10}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">svc</span>  <span class="o">=</span> <span class="n">SVC</span><span class="p">(</span><span class="n">C</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">kernel</span><span class="o">=</span><span class="s">'rbf'</span><span class="p">,</span> <span class="n">gamma</span><span class="o">=</span><span class="s">'auto'</span><span class="p">,</span> <span class="n">probability</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

<span class="n">svc_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">svc</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">"coefficients"</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">svc_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: SVC

Classification report:
               precision    recall  f1-score   support

           0       0.91      0.93      0.92      1308
           1       0.93      0.91      0.92      1307

    accuracy                           0.92      2615
   macro avg       0.92      0.92      0.92      2615
weighted avg       0.92      0.92      0.92      2615

Accuracy Score: 0.9193116634799235
</code></pre></div></div>

<p><strong>7. Gaussian Process Classifier</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.gaussian_process</span> <span class="kn">import</span> <span class="n">GaussianProcessClassifier</span>

<span class="n">gpc</span> <span class="o">=</span> <span class="n">GaussianProcessClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">124</span><span class="p">)</span>

<span class="n">gpc_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">gpc</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">"None"</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">gpc_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: GaussianProcessClassifier

Classification report:
               precision    recall  f1-score   support

           0       0.91      0.89      0.90      1308
           1       0.90      0.91      0.90      1307

    accuracy                           0.90      2615
   macro avg       0.90      0.90      0.90      2615
weighted avg       0.90      0.90      0.90      2615

Accuracy Score: 0.9021032504780114
</code></pre></div></div>

<p><strong>8. AdaBoost</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">AdaBoostClassifier</span>
<span class="c1"># Model building - hyperparam tuning
</span>
<span class="n">adac</span>  <span class="o">=</span> <span class="n">AdaBoostClassifier</span><span class="p">()</span>

<span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span><span class="s">'algorithm'</span><span class="p">:[</span><span class="s">'SAMME'</span><span class="p">,</span> <span class="s">'SAMME.R'</span><span class="p">],</span>
              <span class="s">'n_estimators'</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span>
              <span class="s">'learning_rate'</span><span class="p">:[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">],</span>
              <span class="s">'random_state'</span><span class="p">:[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">124</span><span class="p">],</span>
             <span class="p">}</span>  

<span class="n">grid</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">adac</span><span class="p">,</span><span class="n">parameters</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
<span class="n">grid</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Best parameter of AdaBoostClassifier Algorithm:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">grid</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 128 candidates, totalling 640 fits
Best parameter of AdaBoostClassifier Algorithm:
 {'algorithm': 'SAMME.R', 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 10}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">adac</span> <span class="o">=</span> <span class="n">AdaBoostClassifier</span><span class="p">(</span><span class="n">algorithm</span> <span class="o">=</span> <span class="s">'SAMME.R'</span><span class="p">,</span> <span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span><span class="n">n_estimators</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

<span class="n">adac_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">adac</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">"features"</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">adac_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: AdaBoostClassifier

Classification report:
               precision    recall  f1-score   support

           0       0.91      0.91      0.91      1308
           1       0.91      0.91      0.91      1307

    accuracy                           0.91      2615
   macro avg       0.91      0.91      0.91      2615
weighted avg       0.91      0.91      0.91      2615

Accuracy Score: 0.9105162523900574
</code></pre></div></div>

<p><strong>9. Multi Layer Perceptron</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.neural_network</span> <span class="kn">import</span> <span class="n">MLPClassifier</span>

<span class="n">mlp</span> <span class="o">=</span> <span class="n">MLPClassifier</span><span class="p">()</span>

<span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span><span class="s">'solver'</span><span class="p">:[</span><span class="s">'lbfgs'</span><span class="p">,</span> <span class="s">'sgd'</span><span class="p">,</span> <span class="s">'adam'</span><span class="p">],</span>
              <span class="s">'activation'</span><span class="p">:</span> <span class="p">[</span><span class="s">'tanh'</span><span class="p">,</span> <span class="s">'relu'</span><span class="p">],</span>
              <span class="s">'alpha'</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
              <span class="s">'max_iter'</span><span class="p">:[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span>
              <span class="s">'random_state'</span><span class="p">:[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">124</span><span class="p">],</span>
             <span class="p">}</span>  

<span class="n">grid</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span><span class="n">parameters</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> 
<span class="n">grid</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Best parameter of MLPClassifier Algorithm:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">grid</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 72 candidates, totalling 360 fits
Best parameter of MLPClassifier Algorithm:
 {'activation': 'relu', 'alpha': 1, 'max_iter': 100, 'random_state': 124, 'solver': 'lbfgs'}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mlp</span> <span class="o">=</span> <span class="n">MLPClassifier</span><span class="p">(</span><span class="n">activation</span> <span class="o">=</span> <span class="s">'relu'</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> 
                    <span class="n">max_iter</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">random_state</span> <span class="o">=</span> <span class="mi">124</span><span class="p">,</span> 
                    <span class="n">solver</span> <span class="o">=</span> <span class="s">'lbfgs'</span><span class="p">)</span>

<span class="n">mlp_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">"None"</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">mlp_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: MLPClassifier

Classification report:
               precision    recall  f1-score   support

           0       0.92      0.92      0.92      1308
           1       0.92      0.91      0.92      1307

    accuracy                           0.92      2615
   macro avg       0.92      0.92      0.92      2615
weighted avg       0.92      0.92      0.92      2615

Accuracy Score: 0.918546845124283
</code></pre></div></div>

<p><strong>10. Bagging Classifier</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># &gt;&lt; no need hyperparameter tuning
</span>
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">BaggingClassifier</span>

<span class="n">bgc</span> <span class="o">=</span> <span class="n">BaggingClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">124</span><span class="p">)</span>

<span class="n">bgc_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">bgc</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">"None"</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">bgc_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm: BaggingClassifier

Classification report:
               precision    recall  f1-score   support

           0       0.93      0.95      0.94      1308
           1       0.95      0.93      0.94      1307

    accuracy                           0.94      2615
   macro avg       0.94      0.94      0.94      2615
weighted avg       0.94      0.94      0.94      2615

Accuracy Score: 0.9384321223709369
</code></pre></div></div>

<p><strong>11. XGBoost</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">xgboost</span> <span class="kn">import</span> <span class="n">XGBClassifier</span>

<span class="n">xgb</span> <span class="o">=</span> <span class="n">XGBClassifier</span><span class="p">()</span>

<span class="n">estimator</span> <span class="o">=</span> <span class="n">XGBClassifier</span><span class="p">(</span>
    <span class="n">objective</span><span class="o">=</span> <span class="s">'binary:logistic'</span><span class="p">,</span>
    <span class="n">nthread</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
    <span class="n">seed</span><span class="o">=</span><span class="mi">42</span>
<span class="p">)</span>

<span class="n">parameters</span> <span class="o">=</span> <span class="p">{</span><span class="s">'max_depth'</span><span class="p">:</span> <span class="nb">range</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
              <span class="s">'n_estimators'</span><span class="p">:</span> <span class="nb">range</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">220</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span>
              <span class="s">'learning_rate'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">]</span>
             <span class="p">}</span>  

<span class="n">grid</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">estimator</span><span class="o">=</span><span class="n">estimator</span><span class="p">,</span><span class="n">param_grid</span><span class="o">=</span><span class="n">parameters</span><span class="p">,</span><span class="n">scoring</span> <span class="o">=</span> <span class="s">'accuracy'</span><span class="p">,</span><span class="n">n_jobs</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span><span class="n">cv</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> 
<span class="n">grid</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Best parameter of XGBClassifier Algorithm:</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="n">grid</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 10 folds for each of 96 candidates, totalling 960 fits
[08:16:58] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.4.0/src/learner.cc:1095: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.
Best parameter of XGBClassifier Algorithm:
 {'learning_rate': 0.1, 'max_depth': 9, 'n_estimators': 180}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xgb</span> <span class="o">=</span> <span class="n">XGBClassifier</span><span class="p">(</span><span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">9</span><span class="p">,</span> <span class="n">n_estimators</span> <span class="o">=</span> <span class="mi">180</span><span class="p">)</span>

<span class="n">xgb_acc</span> <span class="o">=</span> <span class="n">churn_predict</span><span class="p">(</span><span class="n">xgb</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="s">"None"</span><span class="p">,</span> <span class="n">threshold_plot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">xgb_acc</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[08:20:36] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.4.0/src/learner.cc:1095: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.
Algorithm: XGBClassifier

Classification report:
               precision    recall  f1-score   support

           0       0.96      0.95      0.96      1308
           1       0.95      0.96      0.96      1307

    accuracy                           0.96      2615
   macro avg       0.96      0.96      0.96      2615
weighted avg       0.96      0.96      0.96      2615

Accuracy Score: 0.955640535372849
</code></pre></div></div>

<hr />
<p><img src="/img/posts/no-churn/Phase 5.png" alt="png" />
<strong>-) Summary of the Analysis</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#wrap up each accuracies into variables
</span><span class="n">xgb_ac</span> <span class="o">=</span> <span class="mf">0.955640535372849</span>
<span class="n">bgc_ac</span> <span class="o">=</span> <span class="mf">0.9384321223709369</span>
<span class="n">mlp_acc</span> <span class="o">=</span> <span class="mf">0.918546845124283</span>
<span class="n">adac_acc</span> <span class="o">=</span> <span class="mf">0.9105162523900574</span>
<span class="n">gpc_acc</span> <span class="o">=</span> <span class="mf">0.9021032504780114</span>
<span class="n">svc_acc</span> <span class="o">=</span> <span class="mf">0.9193116634799235</span>
<span class="n">gnb_acc</span> <span class="o">=</span> <span class="mf">0.7621414913957935</span>
<span class="n">rfc_acc</span> <span class="o">=</span> <span class="mf">0.9223709369024856</span>
<span class="n">knn_acc</span> <span class="o">=</span> <span class="mf">0.9032504780114723</span>
<span class="n">Deci_Tree_model_acc</span> <span class="o">=</span> <span class="mf">0.9365200764818356</span>
<span class="n">logit_acc</span> <span class="o">=</span> <span class="mf">0.7808795411089866</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Summary of the Accuracy scores for test data
</span><span class="n">model_ev</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'Model'</span><span class="p">:</span> <span class="p">[</span><span class="s">'Logistic Regression'</span><span class="p">,</span><span class="s">'Decision Tree'</span><span class="p">,</span><span class="s">'KNN'</span><span class="p">,</span><span class="s">'Random Forest'</span><span class="p">,</span>
                    <span class="s">'Gaussian NB'</span><span class="p">,</span><span class="s">'SVC'</span><span class="p">,</span> <span class="s">'Gaussian Process'</span><span class="p">,</span> <span class="s">'AdaBoost'</span><span class="p">,</span> <span class="s">'MLP'</span><span class="p">,</span> <span class="s">'Bagging'</span><span class="p">,</span> <span class="s">'XGBoost'</span><span class="p">],</span>
                         <span class="s">'Accuracy_percentage'</span><span class="p">:</span> <span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="n">logit_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="nb">round</span><span class="p">(</span><span class="n">Deci_Tree_model_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span><span class="nb">round</span><span class="p">(</span><span class="n">knn_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                          <span class="nb">round</span><span class="p">(</span><span class="n">rfc_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span><span class="nb">round</span><span class="p">(</span><span class="n">gnb_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span><span class="nb">round</span><span class="p">(</span><span class="n">svc_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                          <span class="nb">round</span><span class="p">(</span><span class="n">gpc_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="nb">round</span><span class="p">(</span><span class="n">adac_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="nb">round</span><span class="p">(</span><span class="n">mlp_acc</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                                          <span class="nb">round</span><span class="p">(</span><span class="n">bgc_ac</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="nb">round</span><span class="p">(</span><span class="n">xgb_ac</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]})</span>
<span class="n">table_train</span> <span class="o">=</span> <span class="n">ff</span><span class="p">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">model_ev</span><span class="p">)</span>
<span class="n">py</span><span class="p">.</span><span class="n">iplot</span><span class="p">(</span><span class="n">table_train</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/img/posts/no-churn/newplot (3).png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use textposition='auto' for direct text
</span><span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">go</span><span class="p">.</span><span class="n">Bar</span><span class="p">(</span>
            <span class="n">x</span><span class="o">=</span><span class="n">model_ev</span><span class="p">.</span><span class="n">Model</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">model_ev</span><span class="p">.</span><span class="n">Accuracy_percentage</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="n">model_ev</span><span class="p">.</span><span class="n">Accuracy_percentage</span><span class="p">,</span>
            <span class="n">textposition</span><span class="o">=</span><span class="s">'auto'</span><span class="p">,</span>
        <span class="p">)])</span>

<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/img/posts/no-churn/newplot (2).png" alt="png" /></p>

<p><code class="language-plaintext highlighter-rouge">This visualization is better, concise, and easy to understand than seeing the accuracy results one by one in phase 4.</code> <br /><br /><br />
We‚Äôve prosperously reached the entire project goal as represented in the details above on each phase, and here are the conclusions: <br /></p>
<ol>
  <li>10 selected features could be able to influence the ‚Äúchurn rate‚Äù. And it would be able to affect the customer behavior.</li>
  <li>By trying various models, we could compare each accuracy so the predicted churn risk score (which is represented by Y) is much more sensible to drive retention campaigns and the email campaigns (which contain lucrative offers) could be successfully hitting the target to Churn-YES customers.<br />
<strong>-) Recommendations:</strong><br /></li>
  <li>Eventually we knew that most of our models are felicitous (denoted by the percentage of accuracy &gt; 90%), we highly recommend to applied XGBoost model for this client project because it shows higher accuracy.</li>
  <li>Build the algorithm to provide a chatbot feature (virtual assistant that could possibly avail the customer to solve their issues) and locate it inside downloadable apps and official website. With the help of chatbot existence, it comes in handy when it comes to auto categorizing tickets, request fulfillment, customer care support, and any other issues.</li>
  <li>Collaborating with IT field to discuss more the algorithm, including the UI &amp; UX design (which is liable to affect customer satisfaction and this can lead to churn-flag-yes). So the customers could leave reviews after using the chatbot features. And we can use their reviews as a further evaluation and analysis.</li>
</ol>

<p><strong>-) Project Risks:</strong></p>
<ol>
  <li>This dataset contains pretty much outliers, so the most consuming time to do the analysis is by comparing different methods of outlier treatments. We have to try them one by one and visually perceive which method is suitable to solve them well and ascertain no mistakes while doing them.</li>
  <li>Some of the models while doing hyperparameter tuning, it took a long time to execute. We can understand it because every PC specification is different. Consequently, some of us use GoogleColab as an alternative solution.
___</li>
</ol>
:ET