I"¾­<h2 id="project-team-id--ptid-cds-jul21-1171-members---diana-hema-pavithra-and-sophiya">Project Team ID = PTID-CDS-JUL21-1171 (Members - Diana, Hema, Pavithra and Sophiya)</h2>
<h2 id="project-id--prcl-0017-customer-churn-business-case">Project ID = PRCL-0017 Customer Churn Business case</h2>

<hr />

<p><img src="/img/posts/homeloan/-PW.png" alt="png" /> <br />
<a href="https://shorturl.at/cikyU">Image Credit</a></p>
<blockquote>
  <p><strong>Due to the immensely colossal dataset, the whole process is divided into 4 Colabs notebooks (generally speaking), <code class="language-plaintext highlighter-rouge">the rest of it was just additional phase to compare models after reduce 4 features (on Phase 5, which refers to highly correlated to each other).</code></strong>
___</p>
</blockquote>

<h2 id="phases-outline">Phases Outline</h2>
<blockquote>
  <p>Due to the immensely colossal datasets, we were facing difficulties in executing all the commands in a single notebook, so we are utilizing 4 Colab notebooks each executing a particular Phase of the project as noted below:</p>
  <ol>
    <li><strong>Phase 1</strong> â†’ Done in the first notebook to load and merge the <em>bureau</em> and <em>bureau_Balance</em> datasets and then after Data Preparation exporting the merged dataset to GDrive.</li>
    <li><strong>Phase 2</strong> â†’ Load the rest of datasets and then merged dataset from previous phase. After data preparation, merges all the datasets and exports the dataset to GDrive.</li>
    <li><strong>Phase 3</strong> â†’ Do a PCA for the final merged dataset and find the consequential features that are utilizable for modeling, then export that dataset to GDrive.</li>
    <li><strong>Phase 4</strong> â†’ Load the final dataset, EDA, Modeling, and Summary.</li>
    <li>[Optional] <strong>Phase 5</strong> â†’ Additional phase to compare models after reduce 4 features <code class="language-plaintext highlighter-rouge">(refers to highly correlated to each other)</code>.
___</li>
  </ol>
</blockquote>

<h3 id="-preliminary--identify-the-business-case-">â€”â€” Preliminary â†’ Identify The Business Case â€”â€”</h3>
<p><img src="/img/posts/homeloan/home.jpg" alt="jpg" /> <br />
<a href="https://www.deviantart.com/jasmineallen/art/Home-Equity-Conversion-Mortgage-823688249">Image Credit</a> <br /></p>
<blockquote>
  <p>This is a Home Loan Default Data which contains multiple databases and sources to predict how capable each loan applicant is competent in repaying the loan. <code class="language-plaintext highlighter-rouge">The target is to predict their clients repayment abilities.</code> Doing so will ensure that clients capable of repayment are not rejected and that loans are given with a principal, maturity, and repayment calendar that will empower their clients to be successful. Consequently, in order to avoid â€˜the curse of dimensionalityâ€™, weâ€™re gonna involve the top 10 of most influence features and will involve it to be a part of prediction journey (passing 10 selected features into X).<br />The most opportune method to solve this case is by applying <strong>classification <code class="language-plaintext highlighter-rouge">(Logistic Regression, KNN, Decision Tree, Random Forest, XG Boost, SVM Classification).</code></strong></p>
</blockquote>

<hr />
<p><img src="/img/posts/homeloan/Phase 1 Outline.png" alt="png" /> <br />
<a href="https://shorturl.at/doAPY">Image Credit</a></p>

<hr />
<blockquote>
  <p><strong><code class="language-plaintext highlighter-rouge">There are 7 databases that provide data for this project so analysing the databases in 7 steps, given by the workflow below:</code></strong> <br />
<img src="/img/posts/homeloan/merging_method.png" alt="jpg" /> <br />
<a href="https://shorturl.at/sxQR2">Image Credit</a></p>
</blockquote>

<hr />

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">"ignore"</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_columns'</span><span class="p">,</span><span class="mi">999</span><span class="p">)</span> <span class="c1">#set column display number
</span><span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_rows'</span><span class="p">,</span><span class="mi">200</span><span class="p">)</span> <span class="c1">#set row display number
</span><span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'float_format'</span><span class="p">,</span> <span class="s">'{:f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">)</span> <span class="c1">#set float format
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>
<span class="n">drive</span><span class="p">.</span><span class="n">mount</span><span class="p">(</span><span class="s">'/content/grive'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Drive already mounted at /content/grive; to attempt to forcibly remount, call drive.mount("/content/grive", force_remount=True).
</code></pre></div></div>

<h2 id="step-1-loading-and-preparing-the-bureau-data-set">STEP 1: Loading and preparing the <em>bureau</em> data set</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'/content/grive/MyDrive/HomeLoanDefault/bureau.csv'</span><span class="p">)</span>
<span class="n">bureau</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>SK_ID_CURR</th>
      <th>SK_ID_BUREAU</th>
      <th>CREDIT_ACTIVE</th>
      <th>CREDIT_CURRENCY</th>
      <th>DAYS_CREDIT</th>
      <th>CREDIT_DAY_OVERDUE</th>
      <th>DAYS_CREDIT_ENDDATE</th>
      <th>DAYS_ENDDATE_FACT</th>
      <th>AMT_CREDIT_MAX_OVERDUE</th>
      <th>CNT_CREDIT_PROLONG</th>
      <th>AMT_CREDIT_SUM</th>
      <th>AMT_CREDIT_SUM_DEBT</th>
      <th>AMT_CREDIT_SUM_LIMIT</th>
      <th>AMT_CREDIT_SUM_OVERDUE</th>
      <th>CREDIT_TYPE</th>
      <th>DAYS_CREDIT_UPDATE</th>
      <th>AMT_ANNUITY</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>215354</td>
      <td>5714462</td>
      <td>Closed</td>
      <td>currency 1</td>
      <td>-497</td>
      <td>0</td>
      <td>-153.000000</td>
      <td>-153.000000</td>
      <td>nan</td>
      <td>0</td>
      <td>91323.000000</td>
      <td>0.000000</td>
      <td>nan</td>
      <td>0.000000</td>
      <td>Consumer credit</td>
      <td>-131</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>1</th>
      <td>215354</td>
      <td>5714463</td>
      <td>Active</td>
      <td>currency 1</td>
      <td>-208</td>
      <td>0</td>
      <td>1075.000000</td>
      <td>nan</td>
      <td>nan</td>
      <td>0</td>
      <td>225000.000000</td>
      <td>171342.000000</td>
      <td>nan</td>
      <td>0.000000</td>
      <td>Credit card</td>
      <td>-20</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>2</th>
      <td>215354</td>
      <td>5714464</td>
      <td>Active</td>
      <td>currency 1</td>
      <td>-203</td>
      <td>0</td>
      <td>528.000000</td>
      <td>nan</td>
      <td>nan</td>
      <td>0</td>
      <td>464323.500000</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.000000</td>
      <td>Consumer credit</td>
      <td>-16</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>3</th>
      <td>215354</td>
      <td>5714465</td>
      <td>Active</td>
      <td>currency 1</td>
      <td>-203</td>
      <td>0</td>
      <td>nan</td>
      <td>nan</td>
      <td>nan</td>
      <td>0</td>
      <td>90000.000000</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.000000</td>
      <td>Credit card</td>
      <td>-16</td>
      <td>nan</td>
    </tr>
    <tr>
      <th>4</th>
      <td>215354</td>
      <td>5714466</td>
      <td>Active</td>
      <td>currency 1</td>
      <td>-629</td>
      <td>0</td>
      <td>1197.000000</td>
      <td>nan</td>
      <td>77674.500000</td>
      <td>0</td>
      <td>2700000.000000</td>
      <td>nan</td>
      <td>nan</td>
      <td>0.000000</td>
      <td>Consumer credit</td>
      <td>-21</td>
      <td>nan</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau</span><span class="p">.</span><span class="n">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 1716428 entries, 0 to 1716427
Data columns (total 17 columns):
 #   Column                  Dtype  
---  ------                  -----  
 0   SK_ID_CURR              int64  
 1   SK_ID_BUREAU            int64  
 2   CREDIT_ACTIVE           object 
 3   CREDIT_CURRENCY         object 
 4   DAYS_CREDIT             int64  
 5   CREDIT_DAY_OVERDUE      int64  
 6   DAYS_CREDIT_ENDDATE     float64
 7   DAYS_ENDDATE_FACT       float64
 8   AMT_CREDIT_MAX_OVERDUE  float64
 9   CNT_CREDIT_PROLONG      int64  
 10  AMT_CREDIT_SUM          float64
 11  AMT_CREDIT_SUM_DEBT     float64
 12  AMT_CREDIT_SUM_LIMIT    float64
 13  AMT_CREDIT_SUM_OVERDUE  float64
 14  CREDIT_TYPE             object 
 15  DAYS_CREDIT_UPDATE      int64  
 16  AMT_ANNUITY             float64
dtypes: float64(8), int64(6), object(3)
memory usage: 222.6+ MB
</code></pre></div></div>

<p><strong>Description of The Dataset:</strong></p>

<p>SK_ID_CURR â†’	ID of loan in our sample (one loan in our sample can have 0,1,2 or more related previous credits in credit bureau). <br />
SK_ID_BUREAU â†’	Recoded ID of previous Credit Bureau credit related to our loan (unique coding for each loan application). <br />
CREDIT_ACTIVE â†’ Status of the Credit Bureau (CB) reported credits. <br />
CREDIT_CURRENCY â†’	Recoded currency of the Credit Bureau credit. <br />
DAYS_CREDIT â†’	How many days before current application did client apply for Credit Bureau credit. <br />
CREDIT_DAY_OVERDUE â†’	Number of days past due on CB credit at the time of application for related loan in our sample. <br />
DAYS_CREDIT_ENDDATE â†’	Remaining duration of CB credit (in days) at the time of application in Home Credit. <br />
DAYS_ENDDATE_FACT â†’	Days since CB credit ended at the time of application in Home Credit (only for closed credit). <br />
AMT_CREDIT_MAX_OVERDUE â†’	Maximal amount overdue on the Credit Bureau credit so far (at application date of loan in our sample). <br />
CNT_CREDIT_PROLONG â†’	How many times was the Credit Bureau credit prolonged. <br />
AMT_CREDIT_SUM â†’	Current credit amount for the Credit Bureau credit. <br />
AMT_CREDIT_SUM_DEBT â†’	Current debt on Credit Bureau credit. <br />
AMT_CREDIT_SUM_LIMIT â†’	Current credit limit of credit card reported in Credit Bureau. <br />
AMT_CREDIT_SUM_OVERDUE â†’	Current amount overdue on Credit Bureau credit. <br />
CREDIT_TYPE â†’	Type of Credit Bureau credit (Car, cash,â€¦). <br />
DAYS_CREDIT_UPDATE â†’	How many days before loan application did last information about the Credit Bureau credit come. <br />
AMT_ANNUITY â†’	Loan annuity. <br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># checking if the columns have null values
</span>
<span class="n">bureau</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SK_ID_CURR                      0
SK_ID_BUREAU                    0
CREDIT_ACTIVE                   0
CREDIT_CURRENCY                 0
DAYS_CREDIT                     0
CREDIT_DAY_OVERDUE              0
DAYS_CREDIT_ENDDATE        105553
DAYS_ENDDATE_FACT          633653
AMT_CREDIT_MAX_OVERDUE    1124488
CNT_CREDIT_PROLONG              0
AMT_CREDIT_SUM                 13
AMT_CREDIT_SUM_DEBT        257669
AMT_CREDIT_SUM_LIMIT       591780
AMT_CREDIT_SUM_OVERDUE          0
CREDIT_TYPE                     0
DAYS_CREDIT_UPDATE              0
AMT_ANNUITY               1226791
dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Finding the % of missing values in each column
</span>
<span class="nb">round</span><span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="p">(</span><span class="n">bureau</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">bureau</span><span class="p">.</span><span class="n">index</span><span class="p">)),</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SK_ID_CURR                0.000000
SK_ID_BUREAU              0.000000
CREDIT_ACTIVE             0.000000
CREDIT_CURRENCY           0.000000
DAYS_CREDIT               0.000000
CREDIT_DAY_OVERDUE        0.000000
DAYS_CREDIT_ENDDATE       6.150000
DAYS_ENDDATE_FACT        36.920000
AMT_CREDIT_MAX_OVERDUE   65.510000
CNT_CREDIT_PROLONG        0.000000
AMT_CREDIT_SUM            0.000000
AMT_CREDIT_SUM_DEBT      15.010000
AMT_CREDIT_SUM_LIMIT     34.480000
AMT_CREDIT_SUM_OVERDUE    0.000000
CREDIT_TYPE               0.000000
DAYS_CREDIT_UPDATE        0.000000
AMT_ANNUITY              71.470000
dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Assigning NULL percentage value to a variable
</span><span class="n">bur_null</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="p">(</span><span class="n">bureau</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">bureau</span><span class="p">.</span><span class="n">index</span><span class="p">)),</span><span class="mi">2</span><span class="p">)</span>

<span class="c1"># find columns with more than 50% missing values
</span><span class="n">colBur</span> <span class="o">=</span> <span class="n">bur_null</span><span class="p">[</span><span class="n">bur_null</span> <span class="o">&gt;=</span> <span class="mi">50</span><span class="p">].</span><span class="n">index</span> 

<span class="c1"># drop columns with high null percentage
</span><span class="n">bureau</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">colBur</span><span class="p">,</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>

<span class="c1">#check null percentage after dropping
</span><span class="nb">round</span><span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="p">(</span><span class="n">bureau</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">bureau</span><span class="p">.</span><span class="n">index</span><span class="p">)),</span><span class="mi">2</span><span class="p">)</span>


</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SK_ID_CURR                0.000000
SK_ID_BUREAU              0.000000
CREDIT_ACTIVE             0.000000
CREDIT_CURRENCY           0.000000
DAYS_CREDIT               0.000000
CREDIT_DAY_OVERDUE        0.000000
DAYS_CREDIT_ENDDATE       6.150000
DAYS_ENDDATE_FACT        36.920000
CNT_CREDIT_PROLONG        0.000000
AMT_CREDIT_SUM            0.000000
AMT_CREDIT_SUM_DEBT      15.010000
AMT_CREDIT_SUM_LIMIT     34.480000
AMT_CREDIT_SUM_OVERDUE    0.000000
CREDIT_TYPE               0.000000
DAYS_CREDIT_UPDATE        0.000000
dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># checking the shape after dropping 
</span>
<span class="n">bureau</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1716428, 15)
</code></pre></div></div>

<p><strong>Remarks â†’ 2 columns were dropped <code class="language-plaintext highlighter-rouge">(they had &gt; 50% of missing values.)</code></strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># checking the description 
</span>
<span class="n">bureau</span><span class="p">.</span><span class="n">describe</span><span class="p">().</span><span class="n">T</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>count</th>
      <th>mean</th>
      <th>std</th>
      <th>min</th>
      <th>25%</th>
      <th>50%</th>
      <th>75%</th>
      <th>max</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>SK_ID_CURR</th>
      <td>1716428.000000</td>
      <td>278214.933645</td>
      <td>102938.558112</td>
      <td>100001.000000</td>
      <td>188866.750000</td>
      <td>278055.000000</td>
      <td>367426.000000</td>
      <td>456255.000000</td>
    </tr>
    <tr>
      <th>SK_ID_BUREAU</th>
      <td>1716428.000000</td>
      <td>5924434.489032</td>
      <td>532265.728552</td>
      <td>5000000.000000</td>
      <td>5463953.750000</td>
      <td>5926303.500000</td>
      <td>6385681.250000</td>
      <td>6843457.000000</td>
    </tr>
    <tr>
      <th>DAYS_CREDIT</th>
      <td>1716428.000000</td>
      <td>-1142.107685</td>
      <td>795.164928</td>
      <td>-2922.000000</td>
      <td>-1666.000000</td>
      <td>-987.000000</td>
      <td>-474.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>CREDIT_DAY_OVERDUE</th>
      <td>1716428.000000</td>
      <td>0.818167</td>
      <td>36.544428</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>2792.000000</td>
    </tr>
    <tr>
      <th>DAYS_CREDIT_ENDDATE</th>
      <td>1610875.000000</td>
      <td>510.517362</td>
      <td>4994.219837</td>
      <td>-42060.000000</td>
      <td>-1138.000000</td>
      <td>-330.000000</td>
      <td>474.000000</td>
      <td>31199.000000</td>
    </tr>
    <tr>
      <th>DAYS_ENDDATE_FACT</th>
      <td>1082775.000000</td>
      <td>-1017.437148</td>
      <td>714.010626</td>
      <td>-42023.000000</td>
      <td>-1489.000000</td>
      <td>-897.000000</td>
      <td>-425.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>CNT_CREDIT_PROLONG</th>
      <td>1716428.000000</td>
      <td>0.006410</td>
      <td>0.096224</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>9.000000</td>
    </tr>
    <tr>
      <th>AMT_CREDIT_SUM</th>
      <td>1716415.000000</td>
      <td>354994.591918</td>
      <td>1149811.343980</td>
      <td>0.000000</td>
      <td>51300.000000</td>
      <td>125518.500000</td>
      <td>315000.000000</td>
      <td>585000000.000000</td>
    </tr>
    <tr>
      <th>AMT_CREDIT_SUM_DEBT</th>
      <td>1458759.000000</td>
      <td>137085.119952</td>
      <td>677401.130952</td>
      <td>-4705600.320000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>40153.500000</td>
      <td>170100000.000000</td>
    </tr>
    <tr>
      <th>AMT_CREDIT_SUM_LIMIT</th>
      <td>1124648.000000</td>
      <td>6229.514980</td>
      <td>45032.031476</td>
      <td>-586406.115000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4705600.320000</td>
    </tr>
    <tr>
      <th>AMT_CREDIT_SUM_OVERDUE</th>
      <td>1716428.000000</td>
      <td>37.912758</td>
      <td>5937.650035</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>3756681.000000</td>
    </tr>
    <tr>
      <th>DAYS_CREDIT_UPDATE</th>
      <td>1716428.000000</td>
      <td>-593.748320</td>
      <td>720.747312</td>
      <td>-41947.000000</td>
      <td>-908.000000</td>
      <td>-395.000000</td>
      <td>-33.000000</td>
      <td>372.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p>Days credit, Days Credit End date, Days Enddate Fact, amt credit sum debt and amt credit sum limit have negative values. <code class="language-plaintext highlighter-rouge">These negative values are noted and accepted as the negative values represent the past data from the date of application.</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Filling the null values with mean of their respective columns
</span>
<span class="n">bureau</span><span class="p">[</span><span class="s">'DAYS_CREDIT_ENDDATE'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">bureau</span><span class="p">[</span><span class="s">'DAYS_CREDIT_ENDDATE'</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">bureau</span><span class="p">[</span><span class="s">'DAYS_ENDDATE_FACT'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">bureau</span><span class="p">[</span><span class="s">'DAYS_ENDDATE_FACT'</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">bureau</span><span class="p">[</span><span class="s">'AMT_CREDIT_SUM_DEBT'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">bureau</span><span class="p">[</span><span class="s">'AMT_CREDIT_SUM_DEBT'</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">bureau</span><span class="p">[</span><span class="s">'AMT_CREDIT_SUM_LIMIT'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">bureau</span><span class="p">[</span><span class="s">'AMT_CREDIT_SUM_LIMIT'</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">bureau</span><span class="p">[</span><span class="s">'AMT_CREDIT_SUM'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">bureau</span><span class="p">[</span><span class="s">'AMT_CREDIT_SUM'</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># checking to see if all the null values are filled
</span>
<span class="n">bureau</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SK_ID_CURR                0
SK_ID_BUREAU              0
CREDIT_ACTIVE             0
CREDIT_CURRENCY           0
DAYS_CREDIT               0
CREDIT_DAY_OVERDUE        0
DAYS_CREDIT_ENDDATE       0
DAYS_ENDDATE_FACT         0
CNT_CREDIT_PROLONG        0
AMT_CREDIT_SUM            0
AMT_CREDIT_SUM_DEBT       0
AMT_CREDIT_SUM_LIMIT      0
AMT_CREDIT_SUM_OVERDUE    0
CREDIT_TYPE               0
DAYS_CREDIT_UPDATE        0
dtype: int64
</code></pre></div></div>

<p>The bureau data set is now clean with no missing values and ready to be merged with the other datasets.</p>

<h2 id="step-2-loading-and-preparing-the-bureau_balance-data-set">STEP 2: Loading and preparing the bureau_balance data set</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau_bal</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'/content/grive/MyDrive/HomeLoanDefault/bureau_balance.csv'</span><span class="p">)</span>
<span class="n">bureau_bal</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>SK_ID_BUREAU</th>
      <th>MONTHS_BALANCE</th>
      <th>STATUS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5715448</td>
      <td>0</td>
      <td>C</td>
    </tr>
    <tr>
      <th>1</th>
      <td>5715448</td>
      <td>-1</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>5715448</td>
      <td>-2</td>
      <td>C</td>
    </tr>
    <tr>
      <th>3</th>
      <td>5715448</td>
      <td>-3</td>
      <td>C</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5715448</td>
      <td>-4</td>
      <td>C</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau_bal</span><span class="p">.</span><span class="n">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 27299925 entries, 0 to 27299924
Data columns (total 3 columns):
 #   Column          Dtype 
---  ------          ----- 
 0   SK_ID_BUREAU    int64 
 1   MONTHS_BALANCE  int64 
 2   STATUS          object
dtypes: int64(2), object(1)
memory usage: 624.8+ MB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># checking for missing values
</span>
<span class="n">bureau_bal</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SK_ID_BUREAU      0
MONTHS_BALANCE    0
STATUS            0
dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau_bal</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>SK_ID_BUREAU</th>
      <th>MONTHS_BALANCE</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>27299925.000000</td>
      <td>27299925.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>6036297.332974</td>
      <td>-30.741687</td>
    </tr>
    <tr>
      <th>std</th>
      <td>492348.856904</td>
      <td>23.864509</td>
    </tr>
    <tr>
      <th>min</th>
      <td>5001709.000000</td>
      <td>-96.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>5730933.000000</td>
      <td>-46.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>6070821.000000</td>
      <td>-25.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>6431951.000000</td>
      <td>-11.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>6842888.000000</td>
      <td>0.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p>The MONTHS_BALANCE column has negative values but the team has chosen to <strong><code class="language-plaintext highlighter-rouge">leave the negative values</code></strong> as is because MONTHS_BALANCE describes the Month of balance relative to application date (-1 means the freshest balance date). <br /><br />
<strong>Description of the dataset:</strong></p>

<p>SK_ID_BUREAU â†’	Recoded ID of Credit Bureau credit (unique coding for each application) - <code class="language-plaintext highlighter-rouge">use this to join to CREDIT_BUREAU table.</code> <br />
MONTHS_BALANCE â†’	Month of balance relative to application date (-1 means the freshest balance date). <br />
STATUS â†’	Status of Credit Bureau loan during the month (active, closed, DPD0-30,â€¦ <code class="language-plaintext highlighter-rouge">[C means closed, X means status unknown, 0 means no DPD, 1 means maximal did during month between 1-30, 2 means DPD 31-60,â€¦ 5 means DPD 120+ or sold or written off ]</code>).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Checking the no. of unique SK_ID_BUREAU values
</span>
<span class="n">countbur</span> <span class="o">=</span> <span class="n">bureau_bal</span><span class="p">[</span><span class="s">"SK_ID_BUREAU"</span><span class="p">].</span><span class="n">unique</span><span class="p">()</span>
<span class="n">countbur</span><span class="p">.</span><span class="n">shape</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(817395,)
</code></pre></div></div>

<p>For each unique SK_ID_BUREAU there are duplicate rows that provide the data for multiple dates so we need to keep only that row that has the most recent information and drop the old information. In this dataset we will keep only those rows that have the most recent information about the MONTHS_BALANCE for each applicant relative to the application date (-1 means the freshest balance date) by retaining those rows that have the max value for months balance (given the negative values, max operator will give the most recent info) and delete the other rows for each unique SK_ID_BUREAU.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau_bal</span> <span class="o">=</span> <span class="n">bureau_bal</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'SK_ID_BUREAU'</span><span class="p">,</span> <span class="n">group_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="n">MONTHS_BALANCE</span><span class="p">.</span><span class="n">idxmax</span><span class="p">()])</span>
<span class="n">bureau_bal</span><span class="p">.</span><span class="n">shape</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(817395, 3)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau_bal</span><span class="p">[</span><span class="s">'index'</span><span class="p">]</span> <span class="o">=</span> <span class="n">bureau_bal</span><span class="p">.</span><span class="n">index</span>

</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>SK_ID_CURR</th>
      <th>SK_ID_BUREAU</th>
      <th>CREDIT_ACTIVE</th>
      <th>CREDIT_CURRENCY</th>
      <th>DAYS_CREDIT</th>
      <th>CREDIT_DAY_OVERDUE</th>
      <th>DAYS_CREDIT_ENDDATE</th>
      <th>DAYS_ENDDATE_FACT</th>
      <th>CNT_CREDIT_PROLONG</th>
      <th>AMT_CREDIT_SUM</th>
      <th>AMT_CREDIT_SUM_DEBT</th>
      <th>AMT_CREDIT_SUM_LIMIT</th>
      <th>AMT_CREDIT_SUM_OVERDUE</th>
      <th>CREDIT_TYPE</th>
      <th>DAYS_CREDIT_UPDATE</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>215354</td>
      <td>5714462</td>
      <td>Closed</td>
      <td>currency 1</td>
      <td>-497</td>
      <td>0</td>
      <td>-153.000000</td>
      <td>-153.000000</td>
      <td>0</td>
      <td>91323.000000</td>
      <td>0.000000</td>
      <td>6229.514980</td>
      <td>0.000000</td>
      <td>Consumer credit</td>
      <td>-131</td>
    </tr>
    <tr>
      <th>1</th>
      <td>215354</td>
      <td>5714463</td>
      <td>Active</td>
      <td>currency 1</td>
      <td>-208</td>
      <td>0</td>
      <td>1075.000000</td>
      <td>-1017.437148</td>
      <td>0</td>
      <td>225000.000000</td>
      <td>171342.000000</td>
      <td>6229.514980</td>
      <td>0.000000</td>
      <td>Credit card</td>
      <td>-20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>215354</td>
      <td>5714464</td>
      <td>Active</td>
      <td>currency 1</td>
      <td>-203</td>
      <td>0</td>
      <td>528.000000</td>
      <td>-1017.437148</td>
      <td>0</td>
      <td>464323.500000</td>
      <td>137085.119952</td>
      <td>6229.514980</td>
      <td>0.000000</td>
      <td>Consumer credit</td>
      <td>-16</td>
    </tr>
    <tr>
      <th>3</th>
      <td>215354</td>
      <td>5714465</td>
      <td>Active</td>
      <td>currency 1</td>
      <td>-203</td>
      <td>0</td>
      <td>510.517362</td>
      <td>-1017.437148</td>
      <td>0</td>
      <td>90000.000000</td>
      <td>137085.119952</td>
      <td>6229.514980</td>
      <td>0.000000</td>
      <td>Credit card</td>
      <td>-16</td>
    </tr>
    <tr>
      <th>4</th>
      <td>215354</td>
      <td>5714466</td>
      <td>Active</td>
      <td>currency 1</td>
      <td>-629</td>
      <td>0</td>
      <td>1197.000000</td>
      <td>-1017.437148</td>
      <td>0</td>
      <td>2700000.000000</td>
      <td>137085.119952</td>
      <td>6229.514980</td>
      <td>0.000000</td>
      <td>Consumer credit</td>
      <td>-21</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau_bal</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">bureau_bal</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>SK_ID_BUREAU</th>
      <th>MONTHS_BALANCE</th>
      <th>STATUS</th>
      <th>index</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>5001709</th>
      <td>5001709</td>
      <td>0</td>
      <td>C</td>
      <td>5001709</td>
    </tr>
    <tr>
      <th>5001710</th>
      <td>5001710</td>
      <td>0</td>
      <td>C</td>
      <td>5001710</td>
    </tr>
    <tr>
      <th>5001711</th>
      <td>5001711</td>
      <td>0</td>
      <td>X</td>
      <td>5001711</td>
    </tr>
    <tr>
      <th>5001712</th>
      <td>5001712</td>
      <td>0</td>
      <td>C</td>
      <td>5001712</td>
    </tr>
    <tr>
      <th>5001713</th>
      <td>5001713</td>
      <td>0</td>
      <td>X</td>
      <td>5001713</td>
    </tr>
  </tbody>
</table>
</div>

<p>The bureau_balance data set is now clean with no missing values and duplicates and is now ready to be merged with the other datasets.</p>

<h2 id="step-3-merging-the-bureau-and-the-bureau_bal-data-sets">STEP 3: Merging the bureau and the bureau_bal data sets</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Left merge the two datasets
</span>
<span class="n">bureau_merged</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">bureau</span><span class="p">,</span> <span class="n">bureau_bal</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="s">'SK_ID_BUREAU'</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'left'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">bureau</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">bureau_bal</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">bureau_merged</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1716428, 15) (817395, 4) (1716428, 18)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># the above results show that there are duplicate rows for each SK_ID_CURR, we must keep only those rows that have the most recent info for applicant 
</span>
<span class="c1"># Checking the no. of unique SK_ID_CURR values
</span>
<span class="n">countmer</span> <span class="o">=</span> <span class="n">bureau_merged</span><span class="p">[</span><span class="s">"SK_ID_CURR"</span><span class="p">].</span><span class="n">unique</span><span class="p">()</span>
<span class="n">countmer</span><span class="p">.</span><span class="n">shape</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(305811,)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Keeping only those rows that have the most recent info from the application date and deleting old rows for each SK_ID_CURR
</span>
<span class="n">bureau_merged</span> <span class="o">=</span> <span class="n">bureau_merged</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'SK_ID_CURR'</span><span class="p">,</span> <span class="n">group_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="n">DAYS_CREDIT</span><span class="p">.</span><span class="n">idxmax</span><span class="p">()])</span>
<span class="n">bureau_merged</span><span class="p">.</span><span class="n">shape</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(305811, 18)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Dropping SK_ID_BUREAU column as it is no longer needed for further merging of the datasets
</span>
<span class="n">bureau_merged</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'SK_ID_BUREAU'</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bureau_merged</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(305811, 17)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Export the file
</span><span class="n">bureau_merged</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">'bureau_merged.csv'</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">files</span>
<span class="n">files</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="s">"bureau_merged.csv"</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;IPython.core.display.Javascript object&gt;



&lt;IPython.core.display.Javascript object&gt;
</code></pre></div></div>

:ET